schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "audit"
"""
type audit {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  auditor: user_public_view
  auditorId: Int!
  auditorLogin: String
  createdAt: timestamptz!
  endAt: timestamptz
  grade: numeric

  """An object relationship"""
  group: group!
  groupId: Int!
  id: Int!

  """An object relationship"""
  private: audit_private

  """An object relationship"""
  result: result
  resultId: Int
  updatedAt: timestamptz!
  version: String
}

"""
aggregated selection of "audit"
"""
type audit_aggregate {
  aggregate: audit_aggregate_fields
  nodes: [audit!]!
}

input audit_aggregate_bool_exp {
  count: audit_aggregate_bool_exp_count
}

input audit_aggregate_bool_exp_count {
  arguments: [audit_select_column!]
  distinct: Boolean
  filter: audit_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "audit"
"""
type audit_aggregate_fields {
  avg: audit_avg_fields
  count(columns: [audit_select_column!], distinct: Boolean): Int!
  max: audit_max_fields
  min: audit_min_fields
  stddev: audit_stddev_fields
  stddev_pop: audit_stddev_pop_fields
  stddev_samp: audit_stddev_samp_fields
  sum: audit_sum_fields
  var_pop: audit_var_pop_fields
  var_samp: audit_var_samp_fields
  variance: audit_variance_fields
}

"""
order by aggregate values of table "audit"
"""
input audit_aggregate_order_by {
  avg: audit_avg_order_by
  count: order_by
  max: audit_max_order_by
  min: audit_min_order_by
  stddev: audit_stddev_order_by
  stddev_pop: audit_stddev_pop_order_by
  stddev_samp: audit_stddev_samp_order_by
  sum: audit_sum_order_by
  var_pop: audit_var_pop_order_by
  var_samp: audit_var_samp_order_by
  variance: audit_variance_order_by
}

"""aggregate avg on columns"""
type audit_avg_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by avg() on columns of table "audit"
"""
input audit_avg_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""
Boolean expression to filter rows from the table "audit". All fields are combined with a logical 'AND'.
"""
input audit_bool_exp {
  _and: [audit_bool_exp!]
  _not: audit_bool_exp
  _or: [audit_bool_exp!]
  attrs: jsonb_comparison_exp
  auditor: user_public_view_bool_exp
  auditorId: Int_comparison_exp
  auditorLogin: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  endAt: timestamptz_comparison_exp
  grade: numeric_comparison_exp
  group: group_bool_exp
  groupId: Int_comparison_exp
  id: Int_comparison_exp
  private: audit_private_bool_exp
  result: result_bool_exp
  resultId: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  version: String_comparison_exp
}

"""aggregate max on columns"""
type audit_max_fields {
  auditorId: Int
  createdAt: timestamptz
  endAt: timestamptz
  grade: numeric
  groupId: Int
  id: Int
  resultId: Int
  updatedAt: timestamptz
  version: String
}

"""
order by max() on columns of table "audit"
"""
input audit_max_order_by {
  auditorId: order_by
  createdAt: order_by
  endAt: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
  updatedAt: order_by
  version: order_by
}

"""aggregate min on columns"""
type audit_min_fields {
  auditorId: Int
  createdAt: timestamptz
  endAt: timestamptz
  grade: numeric
  groupId: Int
  id: Int
  resultId: Int
  updatedAt: timestamptz
  version: String
}

"""
order by min() on columns of table "audit"
"""
input audit_min_order_by {
  auditorId: order_by
  createdAt: order_by
  endAt: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
  updatedAt: order_by
  version: order_by
}

"""Ordering options when selecting data from "audit"."""
input audit_order_by {
  attrs: order_by
  auditor: user_public_view_order_by
  auditorId: order_by
  auditorLogin: order_by
  createdAt: order_by
  endAt: order_by
  grade: order_by
  group: group_order_by
  groupId: order_by
  id: order_by
  private: audit_private_order_by
  result: result_order_by
  resultId: order_by
  updatedAt: order_by
  version: order_by
}

"""
columns and relationships of "audit_private"
"""
type audit_private {
  """An object relationship"""
  audit: audit
  code: String
}

"""
Boolean expression to filter rows from the table "audit_private". All fields are combined with a logical 'AND'.
"""
input audit_private_bool_exp {
  _and: [audit_private_bool_exp!]
  _not: audit_private_bool_exp
  _or: [audit_private_bool_exp!]
  audit: audit_bool_exp
  code: String_comparison_exp
}

"""Ordering options when selecting data from "audit_private"."""
input audit_private_order_by {
  audit: audit_order_by
  code: order_by
}

"""
select columns of table "audit_private"
"""
enum audit_private_select_column {
  """column name"""
  code
}

"""
Streaming cursor of the table "audit_private"
"""
input audit_private_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: audit_private_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input audit_private_stream_cursor_value_input {
  code: String
}

"""
select columns of table "audit"
"""
enum audit_select_column {
  """column name"""
  attrs

  """column name"""
  auditorId

  """column name"""
  createdAt

  """column name"""
  endAt

  """column name"""
  grade

  """column name"""
  groupId

  """column name"""
  id

  """column name"""
  resultId

  """column name"""
  updatedAt

  """column name"""
  version
}

"""aggregate stddev on columns"""
type audit_stddev_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by stddev() on columns of table "audit"
"""
input audit_stddev_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""aggregate stddev_pop on columns"""
type audit_stddev_pop_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by stddev_pop() on columns of table "audit"
"""
input audit_stddev_pop_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""aggregate stddev_samp on columns"""
type audit_stddev_samp_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by stddev_samp() on columns of table "audit"
"""
input audit_stddev_samp_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""
Streaming cursor of the table "audit"
"""
input audit_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: audit_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input audit_stream_cursor_value_input {
  attrs: jsonb
  auditorId: Int
  createdAt: timestamptz
  endAt: timestamptz
  grade: numeric
  groupId: Int
  id: Int
  resultId: Int
  updatedAt: timestamptz
  version: String
}

"""aggregate sum on columns"""
type audit_sum_fields {
  auditorId: Int
  grade: numeric
  groupId: Int
  id: Int
  resultId: Int
}

"""
order by sum() on columns of table "audit"
"""
input audit_sum_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""aggregate var_pop on columns"""
type audit_var_pop_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by var_pop() on columns of table "audit"
"""
input audit_var_pop_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""aggregate var_samp on columns"""
type audit_var_samp_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by var_samp() on columns of table "audit"
"""
input audit_var_samp_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

"""aggregate variance on columns"""
type audit_variance_fields {
  auditorId: Float
  grade: Float
  groupId: Float
  id: Float
  resultId: Float
}

"""
order by variance() on columns of table "audit"
"""
input audit_variance_order_by {
  auditorId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  resultId: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "event"
"""
type event {
  campus: String

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!
  createdAt: timestamptz!
  endAt: timestamptz!

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): group_aggregate!
  id: Int!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """An object relationship"""
  object: object!
  objectId: Int!

  """An object relationship"""
  parent: event
  parentId: Int
  path: String!

  """An object relationship"""
  pathByPath: path!

  """An array relationship"""
  progresses(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """An array relationship"""
  progressesByEventid(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """An aggregate relationship"""
  progressesByEventid_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """An aggregate relationship"""
  progresses_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """An object relationship"""
  registration: registration!
  registrationId: Int!

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """An aggregate relationship"""
  results_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!
  status: String

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): [event_user_view!]!

  """An array relationship"""
  usersRelation(
    """distinct select on columns"""
    distinct_on: [event_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_order_by!]

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): event_user_view_aggregate!

  """An array relationship"""
  xps(
    """distinct select on columns"""
    distinct_on: [xp_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [xp_view_order_by!]

    """filter the rows returned"""
    where: xp_view_bool_exp
  ): [xp_view!]!
}

"""
aggregated selection of "event"
"""
type event_aggregate {
  aggregate: event_aggregate_fields
  nodes: [event!]!
}

input event_aggregate_bool_exp {
  count: event_aggregate_bool_exp_count
}

input event_aggregate_bool_exp_count {
  arguments: [event_select_column!]
  distinct: Boolean
  filter: event_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "event"
"""
type event_aggregate_fields {
  avg: event_avg_fields
  count(columns: [event_select_column!], distinct: Boolean): Int!
  max: event_max_fields
  min: event_min_fields
  stddev: event_stddev_fields
  stddev_pop: event_stddev_pop_fields
  stddev_samp: event_stddev_samp_fields
  sum: event_sum_fields
  var_pop: event_var_pop_fields
  var_samp: event_var_samp_fields
  variance: event_variance_fields
}

"""
order by aggregate values of table "event"
"""
input event_aggregate_order_by {
  avg: event_avg_order_by
  count: order_by
  max: event_max_order_by
  min: event_min_order_by
  stddev: event_stddev_order_by
  stddev_pop: event_stddev_pop_order_by
  stddev_samp: event_stddev_samp_order_by
  sum: event_sum_order_by
  var_pop: event_var_pop_order_by
  var_samp: event_var_samp_order_by
  variance: event_variance_order_by
}

"""aggregate avg on columns"""
type event_avg_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by avg() on columns of table "event"
"""
input event_avg_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""
Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
"""
input event_bool_exp {
  _and: [event_bool_exp!]
  _not: event_bool_exp
  _or: [event_bool_exp!]
  campus: String_comparison_exp
  children: event_bool_exp
  children_aggregate: event_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  endAt: timestamptz_comparison_exp
  groups: group_bool_exp
  groups_aggregate: group_aggregate_bool_exp
  id: Int_comparison_exp
  matches: match_bool_exp
  matches_aggregate: match_aggregate_bool_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  parent: event_bool_exp
  parentId: Int_comparison_exp
  path: String_comparison_exp
  pathByPath: path_bool_exp
  progresses: progress_bool_exp
  progressesByEventid: progress_bool_exp
  progressesByEventid_aggregate: progress_aggregate_bool_exp
  progresses_aggregate: progress_aggregate_bool_exp
  registration: registration_bool_exp
  registrationId: Int_comparison_exp
  results: result_bool_exp
  results_aggregate: result_aggregate_bool_exp
  status: String_comparison_exp
  tasks: task_bool_exp
  users: event_user_view_bool_exp
  usersRelation: event_user_bool_exp
  users_aggregate: event_user_view_aggregate_bool_exp
  xps: xp_view_bool_exp
}

"""aggregate max on columns"""
type event_max_fields {
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  registrationId: Int
  status: String
}

"""
order by max() on columns of table "event"
"""
input event_max_order_by {
  campus: order_by
  createdAt: order_by
  endAt: order_by
  id: order_by
  objectId: order_by
  parentId: order_by
  path: order_by
  registrationId: order_by
  status: order_by
}

"""aggregate min on columns"""
type event_min_fields {
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  registrationId: Int
  status: String
}

"""
order by min() on columns of table "event"
"""
input event_min_order_by {
  campus: order_by
  createdAt: order_by
  endAt: order_by
  id: order_by
  objectId: order_by
  parentId: order_by
  path: order_by
  registrationId: order_by
  status: order_by
}

"""Ordering options when selecting data from "event"."""
input event_order_by {
  campus: order_by
  children_aggregate: event_aggregate_order_by
  createdAt: order_by
  endAt: order_by
  groups_aggregate: group_aggregate_order_by
  id: order_by
  matches_aggregate: match_aggregate_order_by
  object: object_order_by
  objectId: order_by
  parent: event_order_by
  parentId: order_by
  path: order_by
  pathByPath: path_order_by
  progressesByEventid_aggregate: progress_aggregate_order_by
  progresses_aggregate: progress_aggregate_order_by
  registration: registration_order_by
  registrationId: order_by
  results_aggregate: result_aggregate_order_by
  status: order_by
  tasks_aggregate: task_aggregate_order_by
  usersRelation_aggregate: event_user_aggregate_order_by
  users_aggregate: event_user_view_aggregate_order_by
  xps_aggregate: xp_view_aggregate_order_by
}

"""
select columns of table "event"
"""
enum event_select_column {
  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  endAt

  """column name"""
  id

  """column name"""
  objectId

  """column name"""
  parentId

  """column name"""
  path

  """column name"""
  registrationId

  """column name"""
  status
}

"""aggregate stddev on columns"""
type event_stddev_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by stddev() on columns of table "event"
"""
input event_stddev_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""aggregate stddev_pop on columns"""
type event_stddev_pop_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by stddev_pop() on columns of table "event"
"""
input event_stddev_pop_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""aggregate stddev_samp on columns"""
type event_stddev_samp_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by stddev_samp() on columns of table "event"
"""
input event_stddev_samp_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""
Streaming cursor of the table "event"
"""
input event_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_stream_cursor_value_input {
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  registrationId: Int
  status: String
}

"""aggregate sum on columns"""
type event_sum_fields {
  id: Int
  objectId: Int
  parentId: Int
  registrationId: Int
}

"""
order by sum() on columns of table "event"
"""
input event_sum_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""
columns and relationships of "event_user"
"""
type event_user {
  createdAt: timestamptz!

  """An object relationship"""
  event: event!
  eventId: Int!
  id: Int!
  level: Int!

  """An object relationship"""
  member: event_user_view

  """An object relationship"""
  publicUser: user_public_view

  """An object relationship"""
  user: user!
  userAuditRatio: float8
  userId: Int!
  userLogin: String

  """An object relationship"""
  xp: xp_view
}

"""
order by aggregate values of table "event_user"
"""
input event_user_aggregate_order_by {
  avg: event_user_avg_order_by
  count: order_by
  max: event_user_max_order_by
  min: event_user_min_order_by
  stddev: event_user_stddev_order_by
  stddev_pop: event_user_stddev_pop_order_by
  stddev_samp: event_user_stddev_samp_order_by
  sum: event_user_sum_order_by
  var_pop: event_user_var_pop_order_by
  var_samp: event_user_var_samp_order_by
  variance: event_user_variance_order_by
}

"""
order by avg() on columns of table "event_user"
"""
input event_user_avg_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "event_user". All fields are combined with a logical 'AND'.
"""
input event_user_bool_exp {
  _and: [event_user_bool_exp!]
  _not: event_user_bool_exp
  _or: [event_user_bool_exp!]
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  id: Int_comparison_exp
  level: Int_comparison_exp
  member: event_user_view_bool_exp
  publicUser: user_public_view_bool_exp
  user: user_bool_exp
  userAuditRatio: float8_comparison_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
  xp: xp_view_bool_exp
}

"""
order by max() on columns of table "event_user"
"""
input event_user_max_order_by {
  createdAt: order_by
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by min() on columns of table "event_user"
"""
input event_user_min_order_by {
  createdAt: order_by
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""Ordering options when selecting data from "event_user"."""
input event_user_order_by {
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  id: order_by
  level: order_by
  member: event_user_view_order_by
  publicUser: user_public_view_order_by
  user: user_order_by
  userAuditRatio: order_by
  userId: order_by
  userLogin: order_by
  xp: xp_view_order_by
}

"""
select columns of table "event_user"
"""
enum event_user_select_column {
  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  id

  """column name"""
  level

  """column name"""
  userId
}

"""
order by stddev() on columns of table "event_user"
"""
input event_user_stddev_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by stddev_pop() on columns of table "event_user"
"""
input event_user_stddev_pop_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by stddev_samp() on columns of table "event_user"
"""
input event_user_stddev_samp_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
Streaming cursor of the table "event_user"
"""
input event_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_user_stream_cursor_value_input {
  createdAt: timestamptz
  eventId: Int
  id: Int
  level: Int
  userId: Int
}

"""
order by sum() on columns of table "event_user"
"""
input event_user_sum_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by var_pop() on columns of table "event_user"
"""
input event_user_var_pop_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by var_samp() on columns of table "event_user"
"""
input event_user_var_samp_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
order by variance() on columns of table "event_user"
"""
input event_user_variance_order_by {
  eventId: order_by
  id: order_by
  level: order_by
  userId: order_by
}

"""
columns and relationships of "event_user_view"
"""
type event_user_view {
  createdAt: timestamptz
  discordDMChannelId: String
  discordId: String
  discordLogin: String

  """An object relationship"""
  event: event
  eventId: Int
  githubId: Int
  id: Int
  login: String
  profile(
    """JSON select path"""
    path: String
  ): jsonb
  updatedAt: timestamptz
}

"""
aggregated selection of "event_user_view"
"""
type event_user_view_aggregate {
  aggregate: event_user_view_aggregate_fields
  nodes: [event_user_view!]!
}

input event_user_view_aggregate_bool_exp {
  count: event_user_view_aggregate_bool_exp_count
}

input event_user_view_aggregate_bool_exp_count {
  arguments: [event_user_view_select_column!]
  distinct: Boolean
  filter: event_user_view_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "event_user_view"
"""
type event_user_view_aggregate_fields {
  avg: event_user_view_avg_fields
  count(columns: [event_user_view_select_column!], distinct: Boolean): Int!
  max: event_user_view_max_fields
  min: event_user_view_min_fields
  stddev: event_user_view_stddev_fields
  stddev_pop: event_user_view_stddev_pop_fields
  stddev_samp: event_user_view_stddev_samp_fields
  sum: event_user_view_sum_fields
  var_pop: event_user_view_var_pop_fields
  var_samp: event_user_view_var_samp_fields
  variance: event_user_view_variance_fields
}

"""
order by aggregate values of table "event_user_view"
"""
input event_user_view_aggregate_order_by {
  avg: event_user_view_avg_order_by
  count: order_by
  max: event_user_view_max_order_by
  min: event_user_view_min_order_by
  stddev: event_user_view_stddev_order_by
  stddev_pop: event_user_view_stddev_pop_order_by
  stddev_samp: event_user_view_stddev_samp_order_by
  sum: event_user_view_sum_order_by
  var_pop: event_user_view_var_pop_order_by
  var_samp: event_user_view_var_samp_order_by
  variance: event_user_view_variance_order_by
}

"""aggregate avg on columns"""
type event_user_view_avg_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by avg() on columns of table "event_user_view"
"""
input event_user_view_avg_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "event_user_view". All fields are combined with a logical 'AND'.
"""
input event_user_view_bool_exp {
  _and: [event_user_view_bool_exp!]
  _not: event_user_view_bool_exp
  _or: [event_user_view_bool_exp!]
  createdAt: timestamptz_comparison_exp
  discordDMChannelId: String_comparison_exp
  discordId: String_comparison_exp
  discordLogin: String_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  githubId: Int_comparison_exp
  id: Int_comparison_exp
  login: String_comparison_exp
  profile: jsonb_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type event_user_view_max_fields {
  createdAt: timestamptz
  discordDMChannelId: String
  discordId: String
  discordLogin: String
  eventId: Int
  githubId: Int
  id: Int
  login: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "event_user_view"
"""
input event_user_view_max_order_by {
  createdAt: order_by
  discordDMChannelId: order_by
  discordId: order_by
  discordLogin: order_by
  eventId: order_by
  githubId: order_by
  id: order_by
  login: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type event_user_view_min_fields {
  createdAt: timestamptz
  discordDMChannelId: String
  discordId: String
  discordLogin: String
  eventId: Int
  githubId: Int
  id: Int
  login: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "event_user_view"
"""
input event_user_view_min_order_by {
  createdAt: order_by
  discordDMChannelId: order_by
  discordId: order_by
  discordLogin: order_by
  eventId: order_by
  githubId: order_by
  id: order_by
  login: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "event_user_view"."""
input event_user_view_order_by {
  createdAt: order_by
  discordDMChannelId: order_by
  discordId: order_by
  discordLogin: order_by
  event: event_order_by
  eventId: order_by
  githubId: order_by
  id: order_by
  login: order_by
  profile: order_by
  updatedAt: order_by
}

"""
select columns of table "event_user_view"
"""
enum event_user_view_select_column {
  """column name"""
  createdAt

  """column name"""
  discordDMChannelId

  """column name"""
  discordId

  """column name"""
  discordLogin

  """column name"""
  eventId

  """column name"""
  githubId

  """column name"""
  id

  """column name"""
  login

  """column name"""
  profile

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type event_user_view_stddev_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by stddev() on columns of table "event_user_view"
"""
input event_user_view_stddev_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type event_user_view_stddev_pop_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "event_user_view"
"""
input event_user_view_stddev_pop_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type event_user_view_stddev_samp_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "event_user_view"
"""
input event_user_view_stddev_samp_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""
Streaming cursor of the table "event_user_view"
"""
input event_user_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_user_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_user_view_stream_cursor_value_input {
  createdAt: timestamptz
  discordDMChannelId: String
  discordId: String
  discordLogin: String
  eventId: Int
  githubId: Int
  id: Int
  login: String
  profile: jsonb
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type event_user_view_sum_fields {
  eventId: Int
  githubId: Int
  id: Int
}

"""
order by sum() on columns of table "event_user_view"
"""
input event_user_view_sum_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate var_pop on columns"""
type event_user_view_var_pop_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by var_pop() on columns of table "event_user_view"
"""
input event_user_view_var_pop_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type event_user_view_var_samp_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by var_samp() on columns of table "event_user_view"
"""
input event_user_view_var_samp_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate variance on columns"""
type event_user_view_variance_fields {
  eventId: Float
  githubId: Float
  id: Float
}

"""
order by variance() on columns of table "event_user_view"
"""
input event_user_view_variance_order_by {
  eventId: order_by
  githubId: order_by
  id: order_by
}

"""aggregate var_pop on columns"""
type event_var_pop_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by var_pop() on columns of table "event"
"""
input event_var_pop_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""aggregate var_samp on columns"""
type event_var_samp_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by var_samp() on columns of table "event"
"""
input event_var_samp_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

"""aggregate variance on columns"""
type event_variance_fields {
  id: Float
  objectId: Float
  parentId: Float
  registrationId: Float
}

"""
order by variance() on columns of table "event"
"""
input event_variance_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
  registrationId: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "group"
"""
type group {
  """An array relationship"""
  auditors(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """An aggregate relationship"""
  auditors_aggregate(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): audit_aggregate!
  campus: String

  """An object relationship"""
  captain: user_public_view
  captainId: Int!
  captainLogin: String
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int
  id: Int!

  """An array relationship"""
  members(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): [group_user!]!

  """An aggregate relationship"""
  members_aggregate(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): group_user_aggregate!

  """An object relationship"""
  object: object!
  objectId: Int!
  path: String!

  """An object relationship"""
  pathByPath: path!

  """An array relationship"""
  progresses(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """An aggregate relationship"""
  progresses_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """An aggregate relationship"""
  results_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!
  status: group_status_enum!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!
  updatedAt: timestamptz!
}

"""
aggregated selection of "group"
"""
type group_aggregate {
  aggregate: group_aggregate_fields
  nodes: [group!]!
}

input group_aggregate_bool_exp {
  count: group_aggregate_bool_exp_count
}

input group_aggregate_bool_exp_count {
  arguments: [group_select_column!]
  distinct: Boolean
  filter: group_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "group"
"""
type group_aggregate_fields {
  avg: group_avg_fields
  count(columns: [group_select_column!], distinct: Boolean): Int!
  max: group_max_fields
  min: group_min_fields
  stddev: group_stddev_fields
  stddev_pop: group_stddev_pop_fields
  stddev_samp: group_stddev_samp_fields
  sum: group_sum_fields
  var_pop: group_var_pop_fields
  var_samp: group_var_samp_fields
  variance: group_variance_fields
}

"""
order by aggregate values of table "group"
"""
input group_aggregate_order_by {
  avg: group_avg_order_by
  count: order_by
  max: group_max_order_by
  min: group_min_order_by
  stddev: group_stddev_order_by
  stddev_pop: group_stddev_pop_order_by
  stddev_samp: group_stddev_samp_order_by
  sum: group_sum_order_by
  var_pop: group_var_pop_order_by
  var_samp: group_var_samp_order_by
  variance: group_variance_order_by
}

"""aggregate avg on columns"""
type group_avg_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by avg() on columns of table "group"
"""
input group_avg_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""
Boolean expression to filter rows from the table "group". All fields are combined with a logical 'AND'.
"""
input group_bool_exp {
  _and: [group_bool_exp!]
  _not: group_bool_exp
  _or: [group_bool_exp!]
  auditors: audit_bool_exp
  auditors_aggregate: audit_aggregate_bool_exp
  campus: String_comparison_exp
  captain: user_public_view_bool_exp
  captainId: Int_comparison_exp
  captainLogin: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  id: Int_comparison_exp
  members: group_user_bool_exp
  members_aggregate: group_user_aggregate_bool_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  pathByPath: path_bool_exp
  progresses: progress_bool_exp
  progresses_aggregate: progress_aggregate_bool_exp
  results: result_bool_exp
  results_aggregate: result_aggregate_bool_exp
  status: group_status_enum_comparison_exp
  tasks: task_bool_exp
  updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "group"
"""
enum group_constraint {
  """
  unique or primary key constraint on columns "captainId", "objectId", "eventId"
  """
  group_eventId_objectId_captainId_key

  """
  unique or primary key constraint on columns "id"
  """
  group_pkey
}

"""
input type for inserting data into table "group"
"""
input group_insert_input {
  eventId: Int
  members: group_user_arr_rel_insert_input
  objectId: Int
  path: String
  results: result_arr_rel_insert_input
}

"""aggregate max on columns"""
type group_max_fields {
  campus: String
  captainId: Int
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "group"
"""
input group_max_order_by {
  campus: order_by
  captainId: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type group_min_fields {
  campus: String
  captainId: Int
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "group"
"""
input group_min_order_by {
  campus: order_by
  captainId: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "group"
"""
type group_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [group!]!
}

"""
input type for inserting object relation for remote table "group"
"""
input group_obj_rel_insert_input {
  data: group_insert_input!

  """upsert condition"""
  on_conflict: group_on_conflict
}

"""
on_conflict condition type for table "group"
"""
input group_on_conflict {
  constraint: group_constraint!
  update_columns: [group_update_column!]! = []
  where: group_bool_exp
}

"""Ordering options when selecting data from "group"."""
input group_order_by {
  auditors_aggregate: audit_aggregate_order_by
  campus: order_by
  captain: user_public_view_order_by
  captainId: order_by
  captainLogin: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  id: order_by
  members_aggregate: group_user_aggregate_order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  pathByPath: path_order_by
  progresses_aggregate: progress_aggregate_order_by
  results_aggregate: result_aggregate_order_by
  status: order_by
  tasks_aggregate: task_aggregate_order_by
  updatedAt: order_by
}

"""primary key columns input for table: group"""
input group_pk_columns_input {
  id: Int!
}

"""
select columns of table "group"
"""
enum group_select_column {
  """column name"""
  campus

  """column name"""
  captainId

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  id

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  status

  """column name"""
  updatedAt
}

"""
input type for updating data in table "group"
"""
input group_set_input {
  status: group_status_enum
}

enum group_status_enum {
  audit
  finished
  setup
  working
}

"""
Boolean expression to compare columns of type "group_status_enum". All fields are combined with logical 'AND'.
"""
input group_status_enum_comparison_exp {
  _eq: group_status_enum
  _in: [group_status_enum!]
  _is_null: Boolean
  _neq: group_status_enum
  _nin: [group_status_enum!]
}

"""aggregate stddev on columns"""
type group_stddev_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by stddev() on columns of table "group"
"""
input group_stddev_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""aggregate stddev_pop on columns"""
type group_stddev_pop_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by stddev_pop() on columns of table "group"
"""
input group_stddev_pop_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""aggregate stddev_samp on columns"""
type group_stddev_samp_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by stddev_samp() on columns of table "group"
"""
input group_stddev_samp_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""
Streaming cursor of the table "group"
"""
input group_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: group_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input group_stream_cursor_value_input {
  campus: String
  captainId: Int
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  status: group_status_enum
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type group_sum_fields {
  captainId: Int
  eventId: Int
  id: Int
  objectId: Int
}

"""
order by sum() on columns of table "group"
"""
input group_sum_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""
update columns of table "group"
"""
enum group_update_column {
  """column name"""
  status
}

input group_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: group_set_input
  where: group_bool_exp!
}

"""
columns and relationships of "group_user"
"""
type group_user {
  confirmed: Boolean!
  createdAt: timestamptz!

  """An object relationship"""
  group: group!
  groupId: Int!
  id: Int!
  updatedAt: timestamptz!

  """An object relationship"""
  user: user_public_view
  userId: Int!
  userLogin: String
}

"""
aggregated selection of "group_user"
"""
type group_user_aggregate {
  aggregate: group_user_aggregate_fields
  nodes: [group_user!]!
}

input group_user_aggregate_bool_exp {
  bool_and: group_user_aggregate_bool_exp_bool_and
  bool_or: group_user_aggregate_bool_exp_bool_or
  count: group_user_aggregate_bool_exp_count
}

input group_user_aggregate_bool_exp_bool_and {
  arguments: group_user_select_column_group_user_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: group_user_bool_exp
  predicate: Boolean_comparison_exp!
}

input group_user_aggregate_bool_exp_bool_or {
  arguments: group_user_select_column_group_user_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: group_user_bool_exp
  predicate: Boolean_comparison_exp!
}

input group_user_aggregate_bool_exp_count {
  arguments: [group_user_select_column!]
  distinct: Boolean
  filter: group_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "group_user"
"""
type group_user_aggregate_fields {
  avg: group_user_avg_fields
  count(columns: [group_user_select_column!], distinct: Boolean): Int!
  max: group_user_max_fields
  min: group_user_min_fields
  stddev: group_user_stddev_fields
  stddev_pop: group_user_stddev_pop_fields
  stddev_samp: group_user_stddev_samp_fields
  sum: group_user_sum_fields
  var_pop: group_user_var_pop_fields
  var_samp: group_user_var_samp_fields
  variance: group_user_variance_fields
}

"""
order by aggregate values of table "group_user"
"""
input group_user_aggregate_order_by {
  avg: group_user_avg_order_by
  count: order_by
  max: group_user_max_order_by
  min: group_user_min_order_by
  stddev: group_user_stddev_order_by
  stddev_pop: group_user_stddev_pop_order_by
  stddev_samp: group_user_stddev_samp_order_by
  sum: group_user_sum_order_by
  var_pop: group_user_var_pop_order_by
  var_samp: group_user_var_samp_order_by
  variance: group_user_variance_order_by
}

"""
input type for inserting array relation for remote table "group_user"
"""
input group_user_arr_rel_insert_input {
  data: [group_user_insert_input!]!

  """upsert condition"""
  on_conflict: group_user_on_conflict
}

"""aggregate avg on columns"""
type group_user_avg_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "group_user"
"""
input group_user_avg_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "group_user". All fields are combined with a logical 'AND'.
"""
input group_user_bool_exp {
  _and: [group_user_bool_exp!]
  _not: group_user_bool_exp
  _or: [group_user_bool_exp!]
  confirmed: Boolean_comparison_exp
  createdAt: timestamptz_comparison_exp
  group: group_bool_exp
  groupId: Int_comparison_exp
  id: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: user_public_view_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
}

"""
unique or primary key constraints on table "group_user"
"""
enum group_user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  group_user_pkey

  """
  unique or primary key constraint on columns "userId", "groupId"
  """
  group_user_userId_groupId_key
}

"""
input type for inserting data into table "group_user"
"""
input group_user_insert_input {
  group: group_obj_rel_insert_input
  groupId: Int
  userId: Int
}

"""aggregate max on columns"""
type group_user_max_fields {
  createdAt: timestamptz
  groupId: Int
  id: Int
  updatedAt: timestamptz
  userId: Int
}

"""
order by max() on columns of table "group_user"
"""
input group_user_max_order_by {
  createdAt: order_by
  groupId: order_by
  id: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type group_user_min_fields {
  createdAt: timestamptz
  groupId: Int
  id: Int
  updatedAt: timestamptz
  userId: Int
}

"""
order by min() on columns of table "group_user"
"""
input group_user_min_order_by {
  createdAt: order_by
  groupId: order_by
  id: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "group_user"
"""
type group_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [group_user!]!
}

"""
on_conflict condition type for table "group_user"
"""
input group_user_on_conflict {
  constraint: group_user_constraint!
  update_columns: [group_user_update_column!]! = []
  where: group_user_bool_exp
}

"""Ordering options when selecting data from "group_user"."""
input group_user_order_by {
  confirmed: order_by
  createdAt: order_by
  group: group_order_by
  groupId: order_by
  id: order_by
  updatedAt: order_by
  user: user_public_view_order_by
  userId: order_by
  userLogin: order_by
}

"""primary key columns input for table: group_user"""
input group_user_pk_columns_input {
  id: Int!
}

"""
select columns of table "group_user"
"""
enum group_user_select_column {
  """column name"""
  confirmed

  """column name"""
  createdAt

  """column name"""
  groupId

  """column name"""
  id

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
select "group_user_aggregate_bool_exp_bool_and_arguments_columns" columns of table "group_user"
"""
enum group_user_select_column_group_user_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  confirmed
}

"""
select "group_user_aggregate_bool_exp_bool_or_arguments_columns" columns of table "group_user"
"""
enum group_user_select_column_group_user_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  confirmed
}

"""
input type for updating data in table "group_user"
"""
input group_user_set_input {
  confirmed: Boolean
}

"""aggregate stddev on columns"""
type group_user_stddev_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "group_user"
"""
input group_user_stddev_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type group_user_stddev_pop_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "group_user"
"""
input group_user_stddev_pop_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type group_user_stddev_samp_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "group_user"
"""
input group_user_stddev_samp_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""
Streaming cursor of the table "group_user"
"""
input group_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: group_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input group_user_stream_cursor_value_input {
  confirmed: Boolean
  createdAt: timestamptz
  groupId: Int
  id: Int
  updatedAt: timestamptz
  userId: Int
}

"""aggregate sum on columns"""
type group_user_sum_fields {
  groupId: Int
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "group_user"
"""
input group_user_sum_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""
update columns of table "group_user"
"""
enum group_user_update_column {
  """column name"""
  confirmed
}

input group_user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: group_user_set_input
  where: group_user_bool_exp!
}

"""aggregate var_pop on columns"""
type group_user_var_pop_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "group_user"
"""
input group_user_var_pop_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type group_user_var_samp_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "group_user"
"""
input group_user_var_samp_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type group_user_variance_fields {
  groupId: Float
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "group_user"
"""
input group_user_variance_order_by {
  groupId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type group_var_pop_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by var_pop() on columns of table "group"
"""
input group_var_pop_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""aggregate var_samp on columns"""
type group_var_samp_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by var_samp() on columns of table "group"
"""
input group_var_samp_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""aggregate variance on columns"""
type group_variance_fields {
  captainId: Float
  eventId: Float
  id: Float
  objectId: Float
}

"""
order by variance() on columns of table "group"
"""
input group_variance_order_by {
  captainId: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "label"
"""
type label {
  createdAt: timestamptz!
  description: String!
  id: Int!
  name: String!
  updatedAt: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): label_user_aggregate!
}

"""
aggregated selection of "label"
"""
type label_aggregate {
  aggregate: label_aggregate_fields
  nodes: [label!]!
}

"""
aggregate fields of "label"
"""
type label_aggregate_fields {
  avg: label_avg_fields
  count(columns: [label_select_column!], distinct: Boolean): Int!
  max: label_max_fields
  min: label_min_fields
  stddev: label_stddev_fields
  stddev_pop: label_stddev_pop_fields
  stddev_samp: label_stddev_samp_fields
  sum: label_sum_fields
  var_pop: label_var_pop_fields
  var_samp: label_var_samp_fields
  variance: label_variance_fields
}

"""aggregate avg on columns"""
type label_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "label". All fields are combined with a logical 'AND'.
"""
input label_bool_exp {
  _and: [label_bool_exp!]
  _not: label_bool_exp
  _or: [label_bool_exp!]
  createdAt: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  users: label_user_bool_exp
  users_aggregate: label_user_aggregate_bool_exp
}

"""aggregate max on columns"""
type label_max_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type label_min_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  updatedAt: timestamptz
}

"""Ordering options when selecting data from "label"."""
input label_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  users_aggregate: label_user_aggregate_order_by
}

"""
select columns of table "label"
"""
enum label_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type label_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type label_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type label_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "label"
"""
input label_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: label_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input label_stream_cursor_value_input {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type label_sum_fields {
  id: Int
}

"""
columns and relationships of "label_user"
"""
type label_user {
  id: Int!

  """An object relationship"""
  label: label!
  labelId: Int!

  """
  A computed field, executes function "get_label_user_label_name"
  """
  labelName: String

  """An object relationship"""
  user: user!
  userId: Int!
}

"""
aggregated selection of "label_user"
"""
type label_user_aggregate {
  aggregate: label_user_aggregate_fields
  nodes: [label_user!]!
}

input label_user_aggregate_bool_exp {
  count: label_user_aggregate_bool_exp_count
}

input label_user_aggregate_bool_exp_count {
  arguments: [label_user_select_column!]
  distinct: Boolean
  filter: label_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "label_user"
"""
type label_user_aggregate_fields {
  avg: label_user_avg_fields
  count(columns: [label_user_select_column!], distinct: Boolean): Int!
  max: label_user_max_fields
  min: label_user_min_fields
  stddev: label_user_stddev_fields
  stddev_pop: label_user_stddev_pop_fields
  stddev_samp: label_user_stddev_samp_fields
  sum: label_user_sum_fields
  var_pop: label_user_var_pop_fields
  var_samp: label_user_var_samp_fields
  variance: label_user_variance_fields
}

"""
order by aggregate values of table "label_user"
"""
input label_user_aggregate_order_by {
  avg: label_user_avg_order_by
  count: order_by
  max: label_user_max_order_by
  min: label_user_min_order_by
  stddev: label_user_stddev_order_by
  stddev_pop: label_user_stddev_pop_order_by
  stddev_samp: label_user_stddev_samp_order_by
  sum: label_user_sum_order_by
  var_pop: label_user_var_pop_order_by
  var_samp: label_user_var_samp_order_by
  variance: label_user_variance_order_by
}

"""aggregate avg on columns"""
type label_user_avg_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by avg() on columns of table "label_user"
"""
input label_user_avg_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "label_user". All fields are combined with a logical 'AND'.
"""
input label_user_bool_exp {
  _and: [label_user_bool_exp!]
  _not: label_user_bool_exp
  _or: [label_user_bool_exp!]
  id: Int_comparison_exp
  label: label_bool_exp
  labelId: Int_comparison_exp
  labelName: String_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
}

"""aggregate max on columns"""
type label_user_max_fields {
  id: Int
  labelId: Int
  userId: Int
}

"""
order by max() on columns of table "label_user"
"""
input label_user_max_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type label_user_min_fields {
  id: Int
  labelId: Int
  userId: Int
}

"""
order by min() on columns of table "label_user"
"""
input label_user_min_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""Ordering options when selecting data from "label_user"."""
input label_user_order_by {
  id: order_by
  label: label_order_by
  labelId: order_by
  labelName: order_by
  user: user_order_by
  userId: order_by
}

"""
select columns of table "label_user"
"""
enum label_user_select_column {
  """column name"""
  id

  """column name"""
  labelId

  """column name"""
  userId
}

"""aggregate stddev on columns"""
type label_user_stddev_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by stddev() on columns of table "label_user"
"""
input label_user_stddev_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type label_user_stddev_pop_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "label_user"
"""
input label_user_stddev_pop_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type label_user_stddev_samp_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "label_user"
"""
input label_user_stddev_samp_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "label_user"
"""
input label_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: label_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input label_user_stream_cursor_value_input {
  id: Int
  labelId: Int
  userId: Int
}

"""aggregate sum on columns"""
type label_user_sum_fields {
  id: Int
  labelId: Int
  userId: Int
}

"""
order by sum() on columns of table "label_user"
"""
input label_user_sum_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type label_user_var_pop_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "label_user"
"""
input label_user_var_pop_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type label_user_var_samp_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "label_user"
"""
input label_user_var_samp_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type label_user_variance_fields {
  id: Float
  labelId: Float
  userId: Float
}

"""
order by variance() on columns of table "label_user"
"""
input label_user_variance_order_by {
  id: order_by
  labelId: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type label_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type label_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type label_variance_fields {
  id: Float
}

"""
columns and relationships of "match"
"""
type match {
  bet: Boolean
  campus: String
  confirmed: Boolean
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int
  id: Int!

  """An object relationship"""
  match: match
  matchId: Int

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """An object relationship"""
  object: object!
  objectId: Int!
  path: String
  result: Boolean
  updatedAt: timestamptz!

  """An object relationship"""
  user: user_public_view
  userId: Int
  userLogin: String
}

"""
aggregated selection of "match"
"""
type match_aggregate {
  aggregate: match_aggregate_fields
  nodes: [match!]!
}

input match_aggregate_bool_exp {
  bool_and: match_aggregate_bool_exp_bool_and
  bool_or: match_aggregate_bool_exp_bool_or
  count: match_aggregate_bool_exp_count
}

input match_aggregate_bool_exp_bool_and {
  arguments: match_select_column_match_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: match_bool_exp
  predicate: Boolean_comparison_exp!
}

input match_aggregate_bool_exp_bool_or {
  arguments: match_select_column_match_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: match_bool_exp
  predicate: Boolean_comparison_exp!
}

input match_aggregate_bool_exp_count {
  arguments: [match_select_column!]
  distinct: Boolean
  filter: match_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "match"
"""
type match_aggregate_fields {
  avg: match_avg_fields
  count(columns: [match_select_column!], distinct: Boolean): Int!
  max: match_max_fields
  min: match_min_fields
  stddev: match_stddev_fields
  stddev_pop: match_stddev_pop_fields
  stddev_samp: match_stddev_samp_fields
  sum: match_sum_fields
  var_pop: match_var_pop_fields
  var_samp: match_var_samp_fields
  variance: match_variance_fields
}

"""
order by aggregate values of table "match"
"""
input match_aggregate_order_by {
  avg: match_avg_order_by
  count: order_by
  max: match_max_order_by
  min: match_min_order_by
  stddev: match_stddev_order_by
  stddev_pop: match_stddev_pop_order_by
  stddev_samp: match_stddev_samp_order_by
  sum: match_sum_order_by
  var_pop: match_var_pop_order_by
  var_samp: match_var_samp_order_by
  variance: match_variance_order_by
}

"""
input type for inserting array relation for remote table "match"
"""
input match_arr_rel_insert_input {
  data: [match_insert_input!]!

  """upsert condition"""
  on_conflict: match_on_conflict
}

"""aggregate avg on columns"""
type match_avg_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by avg() on columns of table "match"
"""
input match_avg_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "match". All fields are combined with a logical 'AND'.
"""
input match_bool_exp {
  _and: [match_bool_exp!]
  _not: match_bool_exp
  _or: [match_bool_exp!]
  bet: Boolean_comparison_exp
  campus: String_comparison_exp
  confirmed: Boolean_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  id: Int_comparison_exp
  match: match_bool_exp
  matchId: Int_comparison_exp
  matches: match_bool_exp
  matches_aggregate: match_aggregate_bool_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  result: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: user_public_view_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
}

"""
unique or primary key constraints on table "match"
"""
enum match_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  match_pkey

  """
  unique or primary key constraint on columns "path", "eventId", "userId"
  """
  match_userId_path_eventId_key
}

"""
input type for inserting data into table "match"
"""
input match_insert_input {
  confirmed: Boolean
  eventId: Int
  match: match_obj_rel_insert_input
  matches: match_arr_rel_insert_input
  objectId: Int
  path: String
}

"""aggregate max on columns"""
type match_max_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  id: Int
  matchId: Int
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by max() on columns of table "match"
"""
input match_max_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type match_min_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  id: Int
  matchId: Int
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by min() on columns of table "match"
"""
input match_min_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "match"
"""
type match_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [match!]!
}

"""
input type for inserting object relation for remote table "match"
"""
input match_obj_rel_insert_input {
  data: match_insert_input!

  """upsert condition"""
  on_conflict: match_on_conflict
}

"""
on_conflict condition type for table "match"
"""
input match_on_conflict {
  constraint: match_constraint!
  update_columns: [match_update_column!]! = []
  where: match_bool_exp
}

"""Ordering options when selecting data from "match"."""
input match_order_by {
  bet: order_by
  campus: order_by
  confirmed: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  id: order_by
  match: match_order_by
  matchId: order_by
  matches_aggregate: match_aggregate_order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  result: order_by
  updatedAt: order_by
  user: user_public_view_order_by
  userId: order_by
  userLogin: order_by
}

"""primary key columns input for table: match"""
input match_pk_columns_input {
  id: Int!
}

"""
select columns of table "match"
"""
enum match_select_column {
  """column name"""
  bet

  """column name"""
  campus

  """column name"""
  confirmed

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  id

  """column name"""
  matchId

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  result

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
select "match_aggregate_bool_exp_bool_and_arguments_columns" columns of table "match"
"""
enum match_select_column_match_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  bet

  """column name"""
  confirmed

  """column name"""
  result
}

"""
select "match_aggregate_bool_exp_bool_or_arguments_columns" columns of table "match"
"""
enum match_select_column_match_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  bet

  """column name"""
  confirmed

  """column name"""
  result
}

"""
input type for updating data in table "match"
"""
input match_set_input {
  bet: Boolean
  confirmed: Boolean
}

"""aggregate stddev on columns"""
type match_stddev_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev() on columns of table "match"
"""
input match_stddev_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type match_stddev_pop_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "match"
"""
input match_stddev_pop_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type match_stddev_samp_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "match"
"""
input match_stddev_samp_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "match"
"""
input match_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: match_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input match_stream_cursor_value_input {
  bet: Boolean
  campus: String
  confirmed: Boolean
  createdAt: timestamptz
  eventId: Int
  id: Int
  matchId: Int
  objectId: Int
  path: String
  result: Boolean
  updatedAt: timestamptz
  userId: Int
}

"""aggregate sum on columns"""
type match_sum_fields {
  eventId: Int
  id: Int
  matchId: Int
  objectId: Int
  userId: Int
}

"""
order by sum() on columns of table "match"
"""
input match_sum_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""
update columns of table "match"
"""
enum match_update_column {
  """column name"""
  bet

  """column name"""
  confirmed
}

input match_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: match_set_input
  where: match_bool_exp!
}

"""aggregate var_pop on columns"""
type match_var_pop_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "match"
"""
input match_var_pop_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type match_var_samp_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "match"
"""
input match_var_samp_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type match_variance_fields {
  eventId: Float
  id: Float
  matchId: Float
  objectId: Float
  userId: Float
}

"""
order by variance() on columns of table "match"
"""
input match_variance_order_by {
  eventId: order_by
  id: order_by
  matchId: order_by
  objectId: order_by
  userId: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "group"
  """
  delete_group(
    """filter the rows which have to be deleted"""
    where: group_bool_exp!
  ): group_mutation_response

  """
  delete single row from the table: "group"
  """
  delete_group_by_pk(id: Int!): group

  """
  delete data from the table: "group_user"
  """
  delete_group_user(
    """filter the rows which have to be deleted"""
    where: group_user_bool_exp!
  ): group_user_mutation_response

  """
  delete single row from the table: "group_user"
  """
  delete_group_user_by_pk(id: Int!): group_user

  """
  delete data from the table: "match"
  """
  delete_match(
    """filter the rows which have to be deleted"""
    where: match_bool_exp!
  ): match_mutation_response

  """
  delete single row from the table: "match"
  """
  delete_match_by_pk(id: Int!): match

  """
  delete data from the table: "registration_user"
  """
  delete_registration_user(
    """filter the rows which have to be deleted"""
    where: registration_user_bool_exp!
  ): registration_user_mutation_response

  """
  delete single row from the table: "registration_user"
  """
  delete_registration_user_by_pk(id: Int!): registration_user

  """
  delete data from the table: "toad.session_game_results"
  """
  delete_toad_session_game_results(
    """filter the rows which have to be deleted"""
    where: toad_session_game_results_bool_exp!
  ): toad_session_game_results_mutation_response

  """
  delete single row from the table: "toad.session_game_results"
  """
  delete_toad_session_game_results_by_pk(id: Int!): toad_session_game_results

  """
  insert data into the table: "group"
  """
  insert_group(
    """the rows to be inserted"""
    objects: [group_insert_input!]!

    """upsert condition"""
    on_conflict: group_on_conflict
  ): group_mutation_response

  """
  insert a single row into the table: "group"
  """
  insert_group_one(
    """the row to be inserted"""
    object: group_insert_input!

    """upsert condition"""
    on_conflict: group_on_conflict
  ): group

  """
  insert data into the table: "group_user"
  """
  insert_group_user(
    """the rows to be inserted"""
    objects: [group_user_insert_input!]!

    """upsert condition"""
    on_conflict: group_user_on_conflict
  ): group_user_mutation_response

  """
  insert a single row into the table: "group_user"
  """
  insert_group_user_one(
    """the row to be inserted"""
    object: group_user_insert_input!

    """upsert condition"""
    on_conflict: group_user_on_conflict
  ): group_user

  """
  insert data into the table: "match"
  """
  insert_match(
    """the rows to be inserted"""
    objects: [match_insert_input!]!

    """upsert condition"""
    on_conflict: match_on_conflict
  ): match_mutation_response

  """
  insert a single row into the table: "match"
  """
  insert_match_one(
    """the row to be inserted"""
    object: match_insert_input!

    """upsert condition"""
    on_conflict: match_on_conflict
  ): match

  """
  insert data into the table: "registration_user"
  """
  insert_registration_user(
    """the rows to be inserted"""
    objects: [registration_user_insert_input!]!

    """upsert condition"""
    on_conflict: registration_user_on_conflict
  ): registration_user_mutation_response

  """
  insert a single row into the table: "registration_user"
  """
  insert_registration_user_one(
    """the row to be inserted"""
    object: registration_user_insert_input!

    """upsert condition"""
    on_conflict: registration_user_on_conflict
  ): registration_user

  """
  insert data into the table: "result"
  """
  insert_result(
    """the rows to be inserted"""
    objects: [result_insert_input!]!

    """upsert condition"""
    on_conflict: result_on_conflict
  ): result_mutation_response

  """
  insert a single row into the table: "result"
  """
  insert_result_one(
    """the row to be inserted"""
    object: result_insert_input!

    """upsert condition"""
    on_conflict: result_on_conflict
  ): result

  """
  insert data into the table: "toad.session_game_results"
  """
  insert_toad_session_game_results(
    """the rows to be inserted"""
    objects: [toad_session_game_results_insert_input!]!

    """upsert condition"""
    on_conflict: toad_session_game_results_on_conflict
  ): toad_session_game_results_mutation_response

  """
  insert a single row into the table: "toad.session_game_results"
  """
  insert_toad_session_game_results_one(
    """the row to be inserted"""
    object: toad_session_game_results_insert_input!

    """upsert condition"""
    on_conflict: toad_session_game_results_on_conflict
  ): toad_session_game_results

  """
  insert data into the table: "toad.session_games"
  """
  insert_toad_session_games(
    """the rows to be inserted"""
    objects: [toad_session_games_insert_input!]!

    """upsert condition"""
    on_conflict: toad_session_games_on_conflict
  ): toad_session_games_mutation_response

  """
  insert a single row into the table: "toad.session_games"
  """
  insert_toad_session_games_one(
    """the row to be inserted"""
    object: toad_session_games_insert_input!

    """upsert condition"""
    on_conflict: toad_session_games_on_conflict
  ): toad_session_games

  """
  insert data into the table: "toad.sessions"
  """
  insert_toad_sessions(
    """the rows to be inserted"""
    objects: [toad_sessions_insert_input!]!

    """upsert condition"""
    on_conflict: toad_sessions_on_conflict
  ): toad_sessions_mutation_response

  """
  insert a single row into the table: "toad.sessions"
  """
  insert_toad_sessions_one(
    """the row to be inserted"""
    object: toad_sessions_insert_input!

    """upsert condition"""
    on_conflict: toad_sessions_on_conflict
  ): toad_sessions

  """
  insert data into the table: "toad.sessions_to_send"
  """
  insert_toad_sessions_to_send(
    """the rows to be inserted"""
    objects: [toad_sessions_to_send_insert_input!]!

    """upsert condition"""
    on_conflict: toad_sessions_to_send_on_conflict
  ): toad_sessions_to_send_mutation_response

  """
  update data of the table: "group"
  """
  update_group(
    """sets the columns of the filtered rows to the given values"""
    _set: group_set_input

    """filter the rows which have to be updated"""
    where: group_bool_exp!
  ): group_mutation_response

  """
  update single row of the table: "group"
  """
  update_group_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: group_set_input
    pk_columns: group_pk_columns_input!
  ): group

  """
  update multiples rows of table: "group"
  """
  update_group_many(
    """updates to execute, in order"""
    updates: [group_updates!]!
  ): [group_mutation_response]

  """
  update data of the table: "group_user"
  """
  update_group_user(
    """sets the columns of the filtered rows to the given values"""
    _set: group_user_set_input

    """filter the rows which have to be updated"""
    where: group_user_bool_exp!
  ): group_user_mutation_response

  """
  update single row of the table: "group_user"
  """
  update_group_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: group_user_set_input
    pk_columns: group_user_pk_columns_input!
  ): group_user

  """
  update multiples rows of table: "group_user"
  """
  update_group_user_many(
    """updates to execute, in order"""
    updates: [group_user_updates!]!
  ): [group_user_mutation_response]

  """
  update data of the table: "match"
  """
  update_match(
    """sets the columns of the filtered rows to the given values"""
    _set: match_set_input

    """filter the rows which have to be updated"""
    where: match_bool_exp!
  ): match_mutation_response

  """
  update single row of the table: "match"
  """
  update_match_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: match_set_input
    pk_columns: match_pk_columns_input!
  ): match

  """
  update multiples rows of table: "match"
  """
  update_match_many(
    """updates to execute, in order"""
    updates: [match_updates!]!
  ): [match_mutation_response]

  """
  update data of the table: "result"
  """
  update_result(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: result_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: result_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: result_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: result_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: result_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: result_set_input

    """filter the rows which have to be updated"""
    where: result_bool_exp!
  ): result_mutation_response

  """
  update single row of the table: "result"
  """
  update_result_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: result_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: result_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: result_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: result_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: result_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: result_set_input
    pk_columns: result_pk_columns_input!
  ): result

  """
  update multiples rows of table: "result"
  """
  update_result_many(
    """updates to execute, in order"""
    updates: [result_updates!]!
  ): [result_mutation_response]

  """
  update data of the table: "toad.session_game_results"
  """
  update_toad_session_game_results(
    """filter the rows which have to be updated"""
    where: toad_session_game_results_bool_exp!
  ): toad_session_game_results_mutation_response

  """
  update single row of the table: "toad.session_game_results"
  """
  update_toad_session_game_results_by_pk(pk_columns: toad_session_game_results_pk_columns_input!): toad_session_game_results

  """
  update multiples rows of table: "toad.session_game_results"
  """
  update_toad_session_game_results_many(
    """updates to execute, in order"""
    updates: [toad_session_game_results_updates!]!
  ): [toad_session_game_results_mutation_response]

  """
  update data of the table: "toad.session_games"
  """
  update_toad_session_games(
    """sets the columns of the filtered rows to the given values"""
    _set: toad_session_games_set_input

    """filter the rows which have to be updated"""
    where: toad_session_games_bool_exp!
  ): toad_session_games_mutation_response

  """
  update single row of the table: "toad.session_games"
  """
  update_toad_session_games_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: toad_session_games_set_input
    pk_columns: toad_session_games_pk_columns_input!
  ): toad_session_games

  """
  update multiples rows of table: "toad.session_games"
  """
  update_toad_session_games_many(
    """updates to execute, in order"""
    updates: [toad_session_games_updates!]!
  ): [toad_session_games_mutation_response]

  """
  update data of the table: "toad.sessions"
  """
  update_toad_sessions(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: toad_sessions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: toad_sessions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: toad_sessions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: toad_sessions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: toad_sessions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: toad_sessions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: toad_sessions_set_input

    """filter the rows which have to be updated"""
    where: toad_sessions_bool_exp!
  ): toad_sessions_mutation_response

  """
  update single row of the table: "toad.sessions"
  """
  update_toad_sessions_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: toad_sessions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: toad_sessions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: toad_sessions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: toad_sessions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: toad_sessions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: toad_sessions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: toad_sessions_set_input
    pk_columns: toad_sessions_pk_columns_input!
  ): toad_sessions

  """
  update multiples rows of table: "toad.sessions"
  """
  update_toad_sessions_many(
    """updates to execute, in order"""
    updates: [toad_sessions_updates!]!
  ): [toad_sessions_mutation_response]

  """
  update data of the table: "toad.sessions_to_send"
  """
  update_toad_sessions_to_send(
    """filter the rows which have to be updated"""
    where: toad_sessions_to_send_bool_exp!
  ): toad_sessions_to_send_mutation_response

  """
  update multiples rows of table: "toad.sessions_to_send"
  """
  update_toad_sessions_to_send_many(
    """updates to execute, in order"""
    updates: [toad_sessions_to_send_updates!]!
  ): [toad_sessions_to_send_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: user_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: user_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: user_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: user_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: user_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: user_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: user_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: user_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: user_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: user_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
columns and relationships of "object"
"""
type object {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  author: user
  authorId: Int
  campus: String
  childrenAttrs(
    """JSON select path"""
    path: String
  ): jsonb!

  """An array relationship"""
  childrenRelation(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): [object_child!]!

  """An aggregate relationship"""
  childrenRelation_aggregate(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): object_child_aggregate!
  createdAt: timestamptz!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): group_aggregate!
  id: Int!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!
  name: String

  """An object relationship"""
  object_type: object_type!

  """An array relationship"""
  objects(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """An aggregate relationship"""
  objects_aggregate(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): object_aggregate!

  """An array relationship"""
  parents(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): [object_child!]!

  """An aggregate relationship"""
  parents_aggregate(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): object_child_aggregate!

  """An array relationship"""
  progresses(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """An aggregate relationship"""
  progresses_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """An object relationship"""
  reference: object

  """An array relationship"""
  registrations(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): [registration!]!

  """An aggregate relationship"""
  registrations_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): registration_aggregate!

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """An aggregate relationship"""
  results_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!
  type: String!
  updatedAt: timestamptz!
}

"""
aggregated selection of "object"
"""
type object_aggregate {
  aggregate: object_aggregate_fields
  nodes: [object!]!
}

input object_aggregate_bool_exp {
  count: object_aggregate_bool_exp_count
}

input object_aggregate_bool_exp_count {
  arguments: [object_select_column!]
  distinct: Boolean
  filter: object_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "object"
"""
type object_aggregate_fields {
  avg: object_avg_fields
  count(columns: [object_select_column!], distinct: Boolean): Int!
  max: object_max_fields
  min: object_min_fields
  stddev: object_stddev_fields
  stddev_pop: object_stddev_pop_fields
  stddev_samp: object_stddev_samp_fields
  sum: object_sum_fields
  var_pop: object_var_pop_fields
  var_samp: object_var_samp_fields
  variance: object_variance_fields
}

"""
order by aggregate values of table "object"
"""
input object_aggregate_order_by {
  avg: object_avg_order_by
  count: order_by
  max: object_max_order_by
  min: object_min_order_by
  stddev: object_stddev_order_by
  stddev_pop: object_stddev_pop_order_by
  stddev_samp: object_stddev_samp_order_by
  sum: object_sum_order_by
  var_pop: object_var_pop_order_by
  var_samp: object_var_samp_order_by
  variance: object_variance_order_by
}

"""aggregate avg on columns"""
type object_avg_fields {
  authorId: Float
  id: Float
}

"""
order by avg() on columns of table "object"
"""
input object_avg_order_by {
  authorId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "object". All fields are combined with a logical 'AND'.
"""
input object_bool_exp {
  _and: [object_bool_exp!]
  _not: object_bool_exp
  _or: [object_bool_exp!]
  attrs: jsonb_comparison_exp
  author: user_bool_exp
  authorId: Int_comparison_exp
  campus: String_comparison_exp
  childrenAttrs: jsonb_comparison_exp
  childrenRelation: object_child_bool_exp
  childrenRelation_aggregate: object_child_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  events: event_bool_exp
  events_aggregate: event_aggregate_bool_exp
  groups: group_bool_exp
  groups_aggregate: group_aggregate_bool_exp
  id: Int_comparison_exp
  matches: match_bool_exp
  matches_aggregate: match_aggregate_bool_exp
  name: String_comparison_exp
  object_type: object_type_bool_exp
  objects: object_bool_exp
  objects_aggregate: object_aggregate_bool_exp
  parents: object_child_bool_exp
  parents_aggregate: object_child_aggregate_bool_exp
  progresses: progress_bool_exp
  progresses_aggregate: progress_aggregate_bool_exp
  reference: object_bool_exp
  registrations: registration_bool_exp
  registrations_aggregate: registration_aggregate_bool_exp
  results: result_bool_exp
  results_aggregate: result_aggregate_bool_exp
  tasks: task_bool_exp
  type: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
columns and relationships of "object_child"
"""
type object_child {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  child: object!
  childId: Int!
  id: Int!
  index: Int!
  key: String!

  """An object relationship"""
  parent: object!
  parentId: Int!

  """An array relationship"""
  paths(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): [path!]!

  """An aggregate relationship"""
  paths_aggregate(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): path_aggregate!
}

"""
aggregated selection of "object_child"
"""
type object_child_aggregate {
  aggregate: object_child_aggregate_fields
  nodes: [object_child!]!
}

input object_child_aggregate_bool_exp {
  count: object_child_aggregate_bool_exp_count
}

input object_child_aggregate_bool_exp_count {
  arguments: [object_child_select_column!]
  distinct: Boolean
  filter: object_child_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "object_child"
"""
type object_child_aggregate_fields {
  avg: object_child_avg_fields
  count(columns: [object_child_select_column!], distinct: Boolean): Int!
  max: object_child_max_fields
  min: object_child_min_fields
  stddev: object_child_stddev_fields
  stddev_pop: object_child_stddev_pop_fields
  stddev_samp: object_child_stddev_samp_fields
  sum: object_child_sum_fields
  var_pop: object_child_var_pop_fields
  var_samp: object_child_var_samp_fields
  variance: object_child_variance_fields
}

"""
order by aggregate values of table "object_child"
"""
input object_child_aggregate_order_by {
  avg: object_child_avg_order_by
  count: order_by
  max: object_child_max_order_by
  min: object_child_min_order_by
  stddev: object_child_stddev_order_by
  stddev_pop: object_child_stddev_pop_order_by
  stddev_samp: object_child_stddev_samp_order_by
  sum: object_child_sum_order_by
  var_pop: object_child_var_pop_order_by
  var_samp: object_child_var_samp_order_by
  variance: object_child_variance_order_by
}

"""aggregate avg on columns"""
type object_child_avg_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by avg() on columns of table "object_child"
"""
input object_child_avg_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""
Boolean expression to filter rows from the table "object_child". All fields are combined with a logical 'AND'.
"""
input object_child_bool_exp {
  _and: [object_child_bool_exp!]
  _not: object_child_bool_exp
  _or: [object_child_bool_exp!]
  attrs: jsonb_comparison_exp
  child: object_bool_exp
  childId: Int_comparison_exp
  id: Int_comparison_exp
  index: Int_comparison_exp
  key: String_comparison_exp
  parent: object_bool_exp
  parentId: Int_comparison_exp
  paths: path_bool_exp
  paths_aggregate: path_aggregate_bool_exp
}

"""aggregate max on columns"""
type object_child_max_fields {
  childId: Int
  id: Int
  index: Int
  key: String
  parentId: Int
}

"""
order by max() on columns of table "object_child"
"""
input object_child_max_order_by {
  childId: order_by
  id: order_by
  index: order_by
  key: order_by
  parentId: order_by
}

"""aggregate min on columns"""
type object_child_min_fields {
  childId: Int
  id: Int
  index: Int
  key: String
  parentId: Int
}

"""
order by min() on columns of table "object_child"
"""
input object_child_min_order_by {
  childId: order_by
  id: order_by
  index: order_by
  key: order_by
  parentId: order_by
}

"""Ordering options when selecting data from "object_child"."""
input object_child_order_by {
  attrs: order_by
  child: object_order_by
  childId: order_by
  id: order_by
  index: order_by
  key: order_by
  parent: object_order_by
  parentId: order_by
  paths_aggregate: path_aggregate_order_by
}

"""
select columns of table "object_child"
"""
enum object_child_select_column {
  """column name"""
  attrs

  """column name"""
  childId

  """column name"""
  id

  """column name"""
  index

  """column name"""
  key

  """column name"""
  parentId
}

"""aggregate stddev on columns"""
type object_child_stddev_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by stddev() on columns of table "object_child"
"""
input object_child_stddev_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate stddev_pop on columns"""
type object_child_stddev_pop_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by stddev_pop() on columns of table "object_child"
"""
input object_child_stddev_pop_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate stddev_samp on columns"""
type object_child_stddev_samp_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by stddev_samp() on columns of table "object_child"
"""
input object_child_stddev_samp_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""
Streaming cursor of the table "object_child"
"""
input object_child_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: object_child_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input object_child_stream_cursor_value_input {
  attrs: jsonb
  childId: Int
  id: Int
  index: Int
  key: String
  parentId: Int
}

"""aggregate sum on columns"""
type object_child_sum_fields {
  childId: Int
  id: Int
  index: Int
  parentId: Int
}

"""
order by sum() on columns of table "object_child"
"""
input object_child_sum_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate var_pop on columns"""
type object_child_var_pop_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by var_pop() on columns of table "object_child"
"""
input object_child_var_pop_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate var_samp on columns"""
type object_child_var_samp_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by var_samp() on columns of table "object_child"
"""
input object_child_var_samp_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate variance on columns"""
type object_child_variance_fields {
  childId: Float
  id: Float
  index: Float
  parentId: Float
}

"""
order by variance() on columns of table "object_child"
"""
input object_child_variance_order_by {
  childId: order_by
  id: order_by
  index: order_by
  parentId: order_by
}

"""aggregate max on columns"""
type object_max_fields {
  authorId: Int
  campus: String
  createdAt: timestamptz
  id: Int
  name: String
  type: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "object"
"""
input object_max_order_by {
  authorId: order_by
  campus: order_by
  createdAt: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type object_min_fields {
  authorId: Int
  campus: String
  createdAt: timestamptz
  id: Int
  name: String
  type: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "object"
"""
input object_min_order_by {
  authorId: order_by
  campus: order_by
  createdAt: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "object"."""
input object_order_by {
  attrs: order_by
  author: user_order_by
  authorId: order_by
  campus: order_by
  childrenAttrs: order_by
  childrenRelation_aggregate: object_child_aggregate_order_by
  createdAt: order_by
  events_aggregate: event_aggregate_order_by
  groups_aggregate: group_aggregate_order_by
  id: order_by
  matches_aggregate: match_aggregate_order_by
  name: order_by
  object_type: object_type_order_by
  objects_aggregate: object_aggregate_order_by
  parents_aggregate: object_child_aggregate_order_by
  progresses_aggregate: progress_aggregate_order_by
  reference: object_order_by
  registrations_aggregate: registration_aggregate_order_by
  results_aggregate: result_aggregate_order_by
  tasks_aggregate: task_aggregate_order_by
  type: order_by
  updatedAt: order_by
}

"""
select columns of table "object"
"""
enum object_select_column {
  """column name"""
  attrs

  """column name"""
  authorId

  """column name"""
  campus

  """column name"""
  childrenAttrs

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type object_stddev_fields {
  authorId: Float
  id: Float
}

"""
order by stddev() on columns of table "object"
"""
input object_stddev_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type object_stddev_pop_fields {
  authorId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "object"
"""
input object_stddev_pop_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type object_stddev_samp_fields {
  authorId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "object"
"""
input object_stddev_samp_order_by {
  authorId: order_by
  id: order_by
}

"""
Streaming cursor of the table "object"
"""
input object_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: object_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input object_stream_cursor_value_input {
  attrs: jsonb
  authorId: Int
  campus: String
  childrenAttrs: jsonb
  createdAt: timestamptz
  id: Int
  name: String
  type: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type object_sum_fields {
  authorId: Int
  id: Int
}

"""
order by sum() on columns of table "object"
"""
input object_sum_order_by {
  authorId: order_by
  id: order_by
}

"""
columns and relationships of "object_type"
"""
type object_type {
  """An array relationship"""
  objects(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """An aggregate relationship"""
  objects_aggregate(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): object_aggregate!
  type: String!
}

"""
aggregated selection of "object_type"
"""
type object_type_aggregate {
  aggregate: object_type_aggregate_fields
  nodes: [object_type!]!
}

"""
aggregate fields of "object_type"
"""
type object_type_aggregate_fields {
  count(columns: [object_type_select_column!], distinct: Boolean): Int!
  max: object_type_max_fields
  min: object_type_min_fields
}

"""
Boolean expression to filter rows from the table "object_type". All fields are combined with a logical 'AND'.
"""
input object_type_bool_exp {
  _and: [object_type_bool_exp!]
  _not: object_type_bool_exp
  _or: [object_type_bool_exp!]
  objects: object_bool_exp
  objects_aggregate: object_aggregate_bool_exp
  type: String_comparison_exp
}

"""aggregate max on columns"""
type object_type_max_fields {
  type: String
}

"""aggregate min on columns"""
type object_type_min_fields {
  type: String
}

"""Ordering options when selecting data from "object_type"."""
input object_type_order_by {
  objects_aggregate: object_aggregate_order_by
  type: order_by
}

"""
select columns of table "object_type"
"""
enum object_type_select_column {
  """column name"""
  type
}

"""
Streaming cursor of the table "object_type"
"""
input object_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: object_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input object_type_stream_cursor_value_input {
  type: String
}

"""aggregate var_pop on columns"""
type object_var_pop_fields {
  authorId: Float
  id: Float
}

"""
order by var_pop() on columns of table "object"
"""
input object_var_pop_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type object_var_samp_fields {
  authorId: Float
  id: Float
}

"""
order by var_samp() on columns of table "object"
"""
input object_var_samp_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate variance on columns"""
type object_variance_fields {
  authorId: Float
  id: Float
}

"""
order by variance() on columns of table "object"
"""
input object_variance_order_by {
  authorId: order_by
  id: order_by
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "path"
"""
type path {
  """An object relationship"""
  object: object
  objectId: Int

  """An object relationship"""
  object_child: object_child
  parentId: Int
  path: String!

  """An array relationship"""
  path_archives(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): [path_archive!]!

  """An aggregate relationship"""
  path_archives_aggregate(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): path_archive_aggregate!
  updatedAt: timestamptz!
}

"""
aggregated selection of "path"
"""
type path_aggregate {
  aggregate: path_aggregate_fields
  nodes: [path!]!
}

input path_aggregate_bool_exp {
  count: path_aggregate_bool_exp_count
}

input path_aggregate_bool_exp_count {
  arguments: [path_select_column!]
  distinct: Boolean
  filter: path_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "path"
"""
type path_aggregate_fields {
  avg: path_avg_fields
  count(columns: [path_select_column!], distinct: Boolean): Int!
  max: path_max_fields
  min: path_min_fields
  stddev: path_stddev_fields
  stddev_pop: path_stddev_pop_fields
  stddev_samp: path_stddev_samp_fields
  sum: path_sum_fields
  var_pop: path_var_pop_fields
  var_samp: path_var_samp_fields
  variance: path_variance_fields
}

"""
order by aggregate values of table "path"
"""
input path_aggregate_order_by {
  avg: path_avg_order_by
  count: order_by
  max: path_max_order_by
  min: path_min_order_by
  stddev: path_stddev_order_by
  stddev_pop: path_stddev_pop_order_by
  stddev_samp: path_stddev_samp_order_by
  sum: path_sum_order_by
  var_pop: path_var_pop_order_by
  var_samp: path_var_samp_order_by
  variance: path_variance_order_by
}

"""
columns and relationships of "path_archive"
"""
type path_archive {
  createdAt: timestamptz!
  id: Int!
  index: Int!
  oldPath: String
  path: String

  """An object relationship"""
  pathByPath: path
  status: path_status_enum
  updatedAt: timestamptz!
}

"""
aggregated selection of "path_archive"
"""
type path_archive_aggregate {
  aggregate: path_archive_aggregate_fields
  nodes: [path_archive!]!
}

input path_archive_aggregate_bool_exp {
  count: path_archive_aggregate_bool_exp_count
}

input path_archive_aggregate_bool_exp_count {
  arguments: [path_archive_select_column!]
  distinct: Boolean
  filter: path_archive_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "path_archive"
"""
type path_archive_aggregate_fields {
  avg: path_archive_avg_fields
  count(columns: [path_archive_select_column!], distinct: Boolean): Int!
  max: path_archive_max_fields
  min: path_archive_min_fields
  stddev: path_archive_stddev_fields
  stddev_pop: path_archive_stddev_pop_fields
  stddev_samp: path_archive_stddev_samp_fields
  sum: path_archive_sum_fields
  var_pop: path_archive_var_pop_fields
  var_samp: path_archive_var_samp_fields
  variance: path_archive_variance_fields
}

"""
order by aggregate values of table "path_archive"
"""
input path_archive_aggregate_order_by {
  avg: path_archive_avg_order_by
  count: order_by
  max: path_archive_max_order_by
  min: path_archive_min_order_by
  stddev: path_archive_stddev_order_by
  stddev_pop: path_archive_stddev_pop_order_by
  stddev_samp: path_archive_stddev_samp_order_by
  sum: path_archive_sum_order_by
  var_pop: path_archive_var_pop_order_by
  var_samp: path_archive_var_samp_order_by
  variance: path_archive_variance_order_by
}

"""aggregate avg on columns"""
type path_archive_avg_fields {
  id: Float
  index: Float
}

"""
order by avg() on columns of table "path_archive"
"""
input path_archive_avg_order_by {
  id: order_by
  index: order_by
}

"""
Boolean expression to filter rows from the table "path_archive". All fields are combined with a logical 'AND'.
"""
input path_archive_bool_exp {
  _and: [path_archive_bool_exp!]
  _not: path_archive_bool_exp
  _or: [path_archive_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  index: Int_comparison_exp
  oldPath: String_comparison_exp
  path: String_comparison_exp
  pathByPath: path_bool_exp
  status: path_status_enum_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type path_archive_max_fields {
  createdAt: timestamptz
  id: Int
  index: Int
  oldPath: String
  path: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "path_archive"
"""
input path_archive_max_order_by {
  createdAt: order_by
  id: order_by
  index: order_by
  oldPath: order_by
  path: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type path_archive_min_fields {
  createdAt: timestamptz
  id: Int
  index: Int
  oldPath: String
  path: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "path_archive"
"""
input path_archive_min_order_by {
  createdAt: order_by
  id: order_by
  index: order_by
  oldPath: order_by
  path: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "path_archive"."""
input path_archive_order_by {
  createdAt: order_by
  id: order_by
  index: order_by
  oldPath: order_by
  path: order_by
  pathByPath: path_order_by
  status: order_by
  updatedAt: order_by
}

"""
select columns of table "path_archive"
"""
enum path_archive_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  index

  """column name"""
  oldPath

  """column name"""
  path

  """column name"""
  status

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type path_archive_stddev_fields {
  id: Float
  index: Float
}

"""
order by stddev() on columns of table "path_archive"
"""
input path_archive_stddev_order_by {
  id: order_by
  index: order_by
}

"""aggregate stddev_pop on columns"""
type path_archive_stddev_pop_fields {
  id: Float
  index: Float
}

"""
order by stddev_pop() on columns of table "path_archive"
"""
input path_archive_stddev_pop_order_by {
  id: order_by
  index: order_by
}

"""aggregate stddev_samp on columns"""
type path_archive_stddev_samp_fields {
  id: Float
  index: Float
}

"""
order by stddev_samp() on columns of table "path_archive"
"""
input path_archive_stddev_samp_order_by {
  id: order_by
  index: order_by
}

"""
Streaming cursor of the table "path_archive"
"""
input path_archive_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: path_archive_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input path_archive_stream_cursor_value_input {
  createdAt: timestamptz
  id: Int
  index: Int
  oldPath: String
  path: String
  status: path_status_enum
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type path_archive_sum_fields {
  id: Int
  index: Int
}

"""
order by sum() on columns of table "path_archive"
"""
input path_archive_sum_order_by {
  id: order_by
  index: order_by
}

"""aggregate var_pop on columns"""
type path_archive_var_pop_fields {
  id: Float
  index: Float
}

"""
order by var_pop() on columns of table "path_archive"
"""
input path_archive_var_pop_order_by {
  id: order_by
  index: order_by
}

"""aggregate var_samp on columns"""
type path_archive_var_samp_fields {
  id: Float
  index: Float
}

"""
order by var_samp() on columns of table "path_archive"
"""
input path_archive_var_samp_order_by {
  id: order_by
  index: order_by
}

"""aggregate variance on columns"""
type path_archive_variance_fields {
  id: Float
  index: Float
}

"""
order by variance() on columns of table "path_archive"
"""
input path_archive_variance_order_by {
  id: order_by
  index: order_by
}

"""aggregate avg on columns"""
type path_avg_fields {
  objectId: Float
  parentId: Float
}

"""
order by avg() on columns of table "path"
"""
input path_avg_order_by {
  objectId: order_by
  parentId: order_by
}

"""
Boolean expression to filter rows from the table "path". All fields are combined with a logical 'AND'.
"""
input path_bool_exp {
  _and: [path_bool_exp!]
  _not: path_bool_exp
  _or: [path_bool_exp!]
  object: object_bool_exp
  objectId: Int_comparison_exp
  object_child: object_child_bool_exp
  parentId: Int_comparison_exp
  path: String_comparison_exp
  path_archives: path_archive_bool_exp
  path_archives_aggregate: path_archive_aggregate_bool_exp
  updatedAt: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type path_max_fields {
  objectId: Int
  parentId: Int
  path: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "path"
"""
input path_max_order_by {
  objectId: order_by
  parentId: order_by
  path: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type path_min_fields {
  objectId: Int
  parentId: Int
  path: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "path"
"""
input path_min_order_by {
  objectId: order_by
  parentId: order_by
  path: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "path"."""
input path_order_by {
  object: object_order_by
  objectId: order_by
  object_child: object_child_order_by
  parentId: order_by
  path: order_by
  path_archives_aggregate: path_archive_aggregate_order_by
  updatedAt: order_by
}

"""
select columns of table "path"
"""
enum path_select_column {
  """column name"""
  objectId

  """column name"""
  parentId

  """column name"""
  path

  """column name"""
  updatedAt
}

enum path_status_enum {
  deleted
  renamed
}

"""
Boolean expression to compare columns of type "path_status_enum". All fields are combined with logical 'AND'.
"""
input path_status_enum_comparison_exp {
  _eq: path_status_enum
  _in: [path_status_enum!]
  _is_null: Boolean
  _neq: path_status_enum
  _nin: [path_status_enum!]
}

"""aggregate stddev on columns"""
type path_stddev_fields {
  objectId: Float
  parentId: Float
}

"""
order by stddev() on columns of table "path"
"""
input path_stddev_order_by {
  objectId: order_by
  parentId: order_by
}

"""aggregate stddev_pop on columns"""
type path_stddev_pop_fields {
  objectId: Float
  parentId: Float
}

"""
order by stddev_pop() on columns of table "path"
"""
input path_stddev_pop_order_by {
  objectId: order_by
  parentId: order_by
}

"""aggregate stddev_samp on columns"""
type path_stddev_samp_fields {
  objectId: Float
  parentId: Float
}

"""
order by stddev_samp() on columns of table "path"
"""
input path_stddev_samp_order_by {
  objectId: order_by
  parentId: order_by
}

"""
Streaming cursor of the table "path"
"""
input path_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: path_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input path_stream_cursor_value_input {
  objectId: Int
  parentId: Int
  path: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type path_sum_fields {
  objectId: Int
  parentId: Int
}

"""
order by sum() on columns of table "path"
"""
input path_sum_order_by {
  objectId: order_by
  parentId: order_by
}

"""aggregate var_pop on columns"""
type path_var_pop_fields {
  objectId: Float
  parentId: Float
}

"""
order by var_pop() on columns of table "path"
"""
input path_var_pop_order_by {
  objectId: order_by
  parentId: order_by
}

"""aggregate var_samp on columns"""
type path_var_samp_fields {
  objectId: Float
  parentId: Float
}

"""
order by var_samp() on columns of table "path"
"""
input path_var_samp_order_by {
  objectId: order_by
  parentId: order_by
}

"""aggregate variance on columns"""
type path_variance_fields {
  objectId: Float
  parentId: Float
}

"""
order by variance() on columns of table "path"
"""
input path_variance_order_by {
  objectId: order_by
  parentId: order_by
}

"""
columns and relationships of "progress"
"""
type progress {
  campus: String
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int
  grade: numeric

  """An object relationship"""
  group: group
  groupId: Int
  id: bigint!
  isDone: Boolean!

  """An object relationship"""
  object: object!
  objectId: Int!
  path: String!

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """An aggregate relationship"""
  results_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!
  updatedAt: timestamptz!

  """An object relationship"""
  user: user!
  userId: Int!
  userLogin: String
  version: String
}

"""
aggregated selection of "progress"
"""
type progress_aggregate {
  aggregate: progress_aggregate_fields
  nodes: [progress!]!
}

input progress_aggregate_bool_exp {
  bool_and: progress_aggregate_bool_exp_bool_and
  bool_or: progress_aggregate_bool_exp_bool_or
  count: progress_aggregate_bool_exp_count
}

input progress_aggregate_bool_exp_bool_and {
  arguments: progress_select_column_progress_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: progress_bool_exp
  predicate: Boolean_comparison_exp!
}

input progress_aggregate_bool_exp_bool_or {
  arguments: progress_select_column_progress_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: progress_bool_exp
  predicate: Boolean_comparison_exp!
}

input progress_aggregate_bool_exp_count {
  arguments: [progress_select_column!]
  distinct: Boolean
  filter: progress_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "progress"
"""
type progress_aggregate_fields {
  avg: progress_avg_fields
  count(columns: [progress_select_column!], distinct: Boolean): Int!
  max: progress_max_fields
  min: progress_min_fields
  stddev: progress_stddev_fields
  stddev_pop: progress_stddev_pop_fields
  stddev_samp: progress_stddev_samp_fields
  sum: progress_sum_fields
  var_pop: progress_var_pop_fields
  var_samp: progress_var_samp_fields
  variance: progress_variance_fields
}

"""
order by aggregate values of table "progress"
"""
input progress_aggregate_order_by {
  avg: progress_avg_order_by
  count: order_by
  max: progress_max_order_by
  min: progress_min_order_by
  stddev: progress_stddev_order_by
  stddev_pop: progress_stddev_pop_order_by
  stddev_samp: progress_stddev_samp_order_by
  sum: progress_sum_order_by
  var_pop: progress_var_pop_order_by
  var_samp: progress_var_samp_order_by
  variance: progress_variance_order_by
}

"""aggregate avg on columns"""
type progress_avg_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by avg() on columns of table "progress"
"""
input progress_avg_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "progress". All fields are combined with a logical 'AND'.
"""
input progress_bool_exp {
  _and: [progress_bool_exp!]
  _not: progress_bool_exp
  _or: [progress_bool_exp!]
  campus: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  grade: numeric_comparison_exp
  group: group_bool_exp
  groupId: Int_comparison_exp
  id: bigint_comparison_exp
  isDone: Boolean_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  results: result_bool_exp
  results_aggregate: result_aggregate_bool_exp
  updatedAt: timestamptz_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
  version: String_comparison_exp
}

"""
columns and relationships of "progress_by_path_view"
"""
type progress_by_path_view {
  """An object relationship"""
  bestProgress: progress
  bestProgressVersion: String
  campus: String
  count: bigint
  createdAt: timestamptz

  """An object relationship"""
  lastProgress: progress
  lastProgressId: bigint

  """An object relationship"""
  object: object
  objectId: Int
  path: String
  succeeded: Boolean
  updatedAt: timestamptz

  """An object relationship"""
  user: user
  userId: Int
}

"""
aggregated selection of "progress_by_path_view"
"""
type progress_by_path_view_aggregate {
  aggregate: progress_by_path_view_aggregate_fields
  nodes: [progress_by_path_view!]!
}

input progress_by_path_view_aggregate_bool_exp {
  bool_and: progress_by_path_view_aggregate_bool_exp_bool_and
  bool_or: progress_by_path_view_aggregate_bool_exp_bool_or
  count: progress_by_path_view_aggregate_bool_exp_count
}

input progress_by_path_view_aggregate_bool_exp_bool_and {
  arguments: progress_by_path_view_select_column_progress_by_path_view_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: progress_by_path_view_bool_exp
  predicate: Boolean_comparison_exp!
}

input progress_by_path_view_aggregate_bool_exp_bool_or {
  arguments: progress_by_path_view_select_column_progress_by_path_view_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: progress_by_path_view_bool_exp
  predicate: Boolean_comparison_exp!
}

input progress_by_path_view_aggregate_bool_exp_count {
  arguments: [progress_by_path_view_select_column!]
  distinct: Boolean
  filter: progress_by_path_view_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "progress_by_path_view"
"""
type progress_by_path_view_aggregate_fields {
  avg: progress_by_path_view_avg_fields
  count(columns: [progress_by_path_view_select_column!], distinct: Boolean): Int!
  max: progress_by_path_view_max_fields
  min: progress_by_path_view_min_fields
  stddev: progress_by_path_view_stddev_fields
  stddev_pop: progress_by_path_view_stddev_pop_fields
  stddev_samp: progress_by_path_view_stddev_samp_fields
  sum: progress_by_path_view_sum_fields
  var_pop: progress_by_path_view_var_pop_fields
  var_samp: progress_by_path_view_var_samp_fields
  variance: progress_by_path_view_variance_fields
}

"""
order by aggregate values of table "progress_by_path_view"
"""
input progress_by_path_view_aggregate_order_by {
  avg: progress_by_path_view_avg_order_by
  count: order_by
  max: progress_by_path_view_max_order_by
  min: progress_by_path_view_min_order_by
  stddev: progress_by_path_view_stddev_order_by
  stddev_pop: progress_by_path_view_stddev_pop_order_by
  stddev_samp: progress_by_path_view_stddev_samp_order_by
  sum: progress_by_path_view_sum_order_by
  var_pop: progress_by_path_view_var_pop_order_by
  var_samp: progress_by_path_view_var_samp_order_by
  variance: progress_by_path_view_variance_order_by
}

"""aggregate avg on columns"""
type progress_by_path_view_avg_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by avg() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_avg_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "progress_by_path_view". All fields are combined with a logical 'AND'.
"""
input progress_by_path_view_bool_exp {
  _and: [progress_by_path_view_bool_exp!]
  _not: progress_by_path_view_bool_exp
  _or: [progress_by_path_view_bool_exp!]
  bestProgress: progress_bool_exp
  bestProgressVersion: String_comparison_exp
  campus: String_comparison_exp
  count: bigint_comparison_exp
  createdAt: timestamptz_comparison_exp
  lastProgress: progress_bool_exp
  lastProgressId: bigint_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  succeeded: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
}

"""aggregate max on columns"""
type progress_by_path_view_max_fields {
  bestProgressVersion: String
  campus: String
  count: bigint
  createdAt: timestamptz
  lastProgressId: bigint
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by max() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_max_order_by {
  bestProgressVersion: order_by
  campus: order_by
  count: order_by
  createdAt: order_by
  lastProgressId: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type progress_by_path_view_min_fields {
  bestProgressVersion: String
  campus: String
  count: bigint
  createdAt: timestamptz
  lastProgressId: bigint
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by min() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_min_order_by {
  bestProgressVersion: order_by
  campus: order_by
  count: order_by
  createdAt: order_by
  lastProgressId: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
}

"""Ordering options when selecting data from "progress_by_path_view"."""
input progress_by_path_view_order_by {
  bestProgress: progress_order_by
  bestProgressVersion: order_by
  campus: order_by
  count: order_by
  createdAt: order_by
  lastProgress: progress_order_by
  lastProgressId: order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  succeeded: order_by
  updatedAt: order_by
  user: user_order_by
  userId: order_by
}

"""
select columns of table "progress_by_path_view"
"""
enum progress_by_path_view_select_column {
  """column name"""
  bestProgressVersion

  """column name"""
  campus

  """column name"""
  count

  """column name"""
  createdAt

  """column name"""
  lastProgressId

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  succeeded

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
select "progress_by_path_view_aggregate_bool_exp_bool_and_arguments_columns" columns of table "progress_by_path_view"
"""
enum progress_by_path_view_select_column_progress_by_path_view_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  succeeded
}

"""
select "progress_by_path_view_aggregate_bool_exp_bool_or_arguments_columns" columns of table "progress_by_path_view"
"""
enum progress_by_path_view_select_column_progress_by_path_view_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  succeeded
}

"""aggregate stddev on columns"""
type progress_by_path_view_stddev_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_stddev_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type progress_by_path_view_stddev_pop_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_stddev_pop_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type progress_by_path_view_stddev_samp_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_stddev_samp_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "progress_by_path_view"
"""
input progress_by_path_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: progress_by_path_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input progress_by_path_view_stream_cursor_value_input {
  bestProgressVersion: String
  campus: String
  count: bigint
  createdAt: timestamptz
  lastProgressId: bigint
  objectId: Int
  path: String
  succeeded: Boolean
  updatedAt: timestamptz
  userId: Int
}

"""aggregate sum on columns"""
type progress_by_path_view_sum_fields {
  count: bigint
  lastProgressId: bigint
  objectId: Int
  userId: Int
}

"""
order by sum() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_sum_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type progress_by_path_view_var_pop_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_var_pop_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type progress_by_path_view_var_samp_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_var_samp_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type progress_by_path_view_variance_fields {
  count: Float
  lastProgressId: Float
  objectId: Float
  userId: Float
}

"""
order by variance() on columns of table "progress_by_path_view"
"""
input progress_by_path_view_variance_order_by {
  count: order_by
  lastProgressId: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate max on columns"""
type progress_max_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: bigint
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""
order by max() on columns of table "progress"
"""
input progress_max_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
  version: order_by
}

"""aggregate min on columns"""
type progress_min_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: bigint
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""
order by min() on columns of table "progress"
"""
input progress_min_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  updatedAt: order_by
  userId: order_by
  version: order_by
}

"""Ordering options when selecting data from "progress"."""
input progress_order_by {
  campus: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  grade: order_by
  group: group_order_by
  groupId: order_by
  id: order_by
  isDone: order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  results_aggregate: result_aggregate_order_by
  updatedAt: order_by
  user: user_order_by
  userId: order_by
  userLogin: order_by
  version: order_by
}

"""
select columns of table "progress"
"""
enum progress_select_column {
  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  grade

  """column name"""
  groupId

  """column name"""
  id

  """column name"""
  isDone

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  version
}

"""
select "progress_aggregate_bool_exp_bool_and_arguments_columns" columns of table "progress"
"""
enum progress_select_column_progress_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  isDone
}

"""
select "progress_aggregate_bool_exp_bool_or_arguments_columns" columns of table "progress"
"""
enum progress_select_column_progress_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  isDone
}

"""aggregate stddev on columns"""
type progress_stddev_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev() on columns of table "progress"
"""
input progress_stddev_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type progress_stddev_pop_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "progress"
"""
input progress_stddev_pop_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type progress_stddev_samp_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "progress"
"""
input progress_stddev_samp_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "progress"
"""
input progress_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: progress_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input progress_stream_cursor_value_input {
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: bigint
  isDone: Boolean
  objectId: Int
  path: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""aggregate sum on columns"""
type progress_sum_fields {
  eventId: Int
  grade: numeric
  groupId: Int
  id: bigint
  objectId: Int
  userId: Int
}

"""
order by sum() on columns of table "progress"
"""
input progress_sum_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type progress_var_pop_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "progress"
"""
input progress_var_pop_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type progress_var_samp_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "progress"
"""
input progress_var_samp_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type progress_variance_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by variance() on columns of table "progress"
"""
input progress_variance_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

type query_root {
  """
  fetch data from the table: "audit"
  """
  audit(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """
  fetch aggregated fields from the table: "audit"
  """
  audit_aggregate(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): audit_aggregate!

  """fetch data from the table: "audit" using primary key columns"""
  audit_by_pk(id: Int!): audit

  """
  fetch data from the table: "audit_private"
  """
  audit_private(
    """distinct select on columns"""
    distinct_on: [audit_private_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_private_order_by!]

    """filter the rows returned"""
    where: audit_private_bool_exp
  ): [audit_private!]!

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  event_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!

  """fetch data from the table: "event" using primary key columns"""
  event_by_pk(id: Int!): event

  """
  fetch data from the table: "event_user"
  """
  event_user(
    """distinct select on columns"""
    distinct_on: [event_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_order_by!]

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!

  """fetch data from the table: "event_user" using primary key columns"""
  event_user_by_pk(id: Int!): event_user

  """
  fetch data from the table: "event_user_view"
  """
  event_user_view(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): [event_user_view!]!

  """
  fetch aggregated fields from the table: "event_user_view"
  """
  event_user_view_aggregate(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): event_user_view_aggregate!

  """
  fetch data from the table: "group"
  """
  group(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """
  fetch aggregated fields from the table: "group"
  """
  group_aggregate(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): group_aggregate!

  """fetch data from the table: "group" using primary key columns"""
  group_by_pk(id: Int!): group

  """
  fetch data from the table: "group_user"
  """
  group_user(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): [group_user!]!

  """
  fetch aggregated fields from the table: "group_user"
  """
  group_user_aggregate(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): group_user_aggregate!

  """fetch data from the table: "group_user" using primary key columns"""
  group_user_by_pk(id: Int!): group_user

  """
  fetch data from the table: "label"
  """
  label(
    """distinct select on columns"""
    distinct_on: [label_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_order_by!]

    """filter the rows returned"""
    where: label_bool_exp
  ): [label!]!

  """
  fetch aggregated fields from the table: "label"
  """
  label_aggregate(
    """distinct select on columns"""
    distinct_on: [label_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_order_by!]

    """filter the rows returned"""
    where: label_bool_exp
  ): label_aggregate!

  """fetch data from the table: "label" using primary key columns"""
  label_by_pk(id: Int!): label

  """
  fetch data from the table: "label_user"
  """
  label_user(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """
  fetch aggregated fields from the table: "label_user"
  """
  label_user_aggregate(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): label_user_aggregate!

  """fetch data from the table: "label_user" using primary key columns"""
  label_user_by_pk(id: Int!): label_user

  """
  fetch data from the table: "match"
  """
  match(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """
  fetch aggregated fields from the table: "match"
  """
  match_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """fetch data from the table: "match" using primary key columns"""
  match_by_pk(id: Int!): match

  """
  fetch data from the table: "object"
  """
  object(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """
  fetch aggregated fields from the table: "object"
  """
  object_aggregate(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): object_aggregate!

  """fetch data from the table: "object" using primary key columns"""
  object_by_pk(id: Int!): object

  """
  fetch data from the table: "object_child"
  """
  object_child(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): [object_child!]!

  """
  fetch aggregated fields from the table: "object_child"
  """
  object_child_aggregate(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): object_child_aggregate!

  """fetch data from the table: "object_child" using primary key columns"""
  object_child_by_pk(id: Int!): object_child

  """
  fetch data from the table: "object_type"
  """
  object_type(
    """distinct select on columns"""
    distinct_on: [object_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_type_order_by!]

    """filter the rows returned"""
    where: object_type_bool_exp
  ): [object_type!]!

  """
  fetch aggregated fields from the table: "object_type"
  """
  object_type_aggregate(
    """distinct select on columns"""
    distinct_on: [object_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_type_order_by!]

    """filter the rows returned"""
    where: object_type_bool_exp
  ): object_type_aggregate!

  """fetch data from the table: "object_type" using primary key columns"""
  object_type_by_pk(type: String!): object_type

  """
  fetch data from the table: "path"
  """
  path(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): [path!]!

  """
  fetch aggregated fields from the table: "path"
  """
  path_aggregate(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): path_aggregate!

  """
  fetch data from the table: "path_archive"
  """
  path_archive(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): [path_archive!]!

  """
  fetch aggregated fields from the table: "path_archive"
  """
  path_archive_aggregate(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): path_archive_aggregate!

  """fetch data from the table: "path_archive" using primary key columns"""
  path_archive_by_pk(id: Int!): path_archive

  """fetch data from the table: "path" using primary key columns"""
  path_by_pk(path: String!): path

  """
  fetch data from the table: "progress"
  """
  progress(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """
  fetch aggregated fields from the table: "progress"
  """
  progress_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """
  fetch data from the table: "progress_by_path_view"
  """
  progress_by_path_view(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): [progress_by_path_view!]!

  """
  fetch aggregated fields from the table: "progress_by_path_view"
  """
  progress_by_path_view_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): progress_by_path_view_aggregate!

  """fetch data from the table: "progress" using primary key columns"""
  progress_by_pk(id: bigint!): progress

  """
  fetch data from the table: "record"
  """
  record(
    """distinct select on columns"""
    distinct_on: [record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [record_order_by!]

    """filter the rows returned"""
    where: record_bool_exp
  ): [record!]!

  """fetch data from the table: "record" using primary key columns"""
  record_by_pk(id: Int!): record

  """
  fetch data from the table: "registration"
  """
  registration(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): [registration!]!

  """
  fetch aggregated fields from the table: "registration"
  """
  registration_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): registration_aggregate!

  """fetch data from the table: "registration" using primary key columns"""
  registration_by_pk(id: Int!): registration

  """
  fetch data from the table: "registration_user"
  """
  registration_user(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): [registration_user!]!

  """
  fetch aggregated fields from the table: "registration_user"
  """
  registration_user_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): registration_user_aggregate!

  """
  fetch data from the table: "registration_user" using primary key columns
  """
  registration_user_by_pk(id: Int!): registration_user

  """
  fetch data from the table: "registration_user_view"
  """
  registration_user_view(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): [registration_user_view!]!

  """
  fetch aggregated fields from the table: "registration_user_view"
  """
  registration_user_view_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): registration_user_view_aggregate!

  """
  fetch data from the table: "result"
  """
  result(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """
  fetch aggregated fields from the table: "result"
  """
  result_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!

  """fetch data from the table: "result" using primary key columns"""
  result_by_pk(id: Int!): result

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(id: Int!): role

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: Int!): task

  """
  fetch data from the table: "timing"
  """
  timing(
    """distinct select on columns"""
    distinct_on: [timing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timing_order_by!]

    """filter the rows returned"""
    where: timing_bool_exp
  ): [timing!]!

  """
  execute function "timings" which returns "timing"
  """
  timings(
    """
    input parameters for function "timings"
    """
    args: timings_args!

    """distinct select on columns"""
    distinct_on: [timing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timing_order_by!]

    """filter the rows returned"""
    where: timing_bool_exp
  ): timing

  """
  fetch data from the table: "toad.campaign_games"
  """
  toad_campaign_games(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): [toad_campaign_games!]!

  """
  fetch aggregated fields from the table: "toad.campaign_games"
  """
  toad_campaign_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): toad_campaign_games_aggregate!

  """
  fetch data from the table: "toad.campaign_games" using primary key columns
  """
  toad_campaign_games_by_pk(id: Int!): toad_campaign_games

  """
  fetch data from the table: "toad.campaigns"
  """
  toad_campaigns(
    """distinct select on columns"""
    distinct_on: [toad_campaigns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaigns_order_by!]

    """filter the rows returned"""
    where: toad_campaigns_bool_exp
  ): [toad_campaigns!]!

  """fetch data from the table: "toad.campaigns" using primary key columns"""
  toad_campaigns_by_pk(id: uuid!): toad_campaigns

  """
  fetch data from the table: "toad.games"
  """
  toad_games(
    """distinct select on columns"""
    distinct_on: [toad_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_games_order_by!]

    """filter the rows returned"""
    where: toad_games_bool_exp
  ): [toad_games!]!

  """
  fetch aggregated fields from the table: "toad.games"
  """
  toad_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_games_order_by!]

    """filter the rows returned"""
    where: toad_games_bool_exp
  ): toad_games_aggregate!

  """fetch data from the table: "toad.games" using primary key columns"""
  toad_games_by_pk(id: uuid!): toad_games

  """
  fetch data from the table: "toad.session_game_results"
  """
  toad_session_game_results(
    """distinct select on columns"""
    distinct_on: [toad_session_game_results_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_game_results_order_by!]

    """filter the rows returned"""
    where: toad_session_game_results_bool_exp
  ): [toad_session_game_results!]!

  """
  fetch data from the table: "toad.session_game_results" using primary key columns
  """
  toad_session_game_results_by_pk(id: Int!): toad_session_game_results

  """
  fetch data from the table: "toad.session_games"
  """
  toad_session_games(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): [toad_session_games!]!

  """
  fetch aggregated fields from the table: "toad.session_games"
  """
  toad_session_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): toad_session_games_aggregate!

  """
  fetch data from the table: "toad.session_games" using primary key columns
  """
  toad_session_games_by_pk(id: Int!): toad_session_games

  """
  fetch data from the table: "toad.sessions"
  """
  toad_sessions(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): [toad_sessions!]!

  """
  fetch aggregated fields from the table: "toad.sessions"
  """
  toad_sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): toad_sessions_aggregate!

  """fetch data from the table: "toad.sessions" using primary key columns"""
  toad_sessions_by_pk(id: uuid!): toad_sessions

  """
  fetch data from the table: "transaction"
  """
  transaction(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): [transaction!]!

  """
  fetch aggregated fields from the table: "transaction"
  """
  transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): transaction_aggregate!

  """fetch data from the table: "transaction" using primary key columns"""
  transaction_by_pk(id: Int!): transaction

  """
  fetch data from the table: "transaction_type"
  """
  transaction_type(
    """distinct select on columns"""
    distinct_on: [transaction_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_type_order_by!]

    """filter the rows returned"""
    where: transaction_type_bool_exp
  ): [transaction_type!]!

  """
  fetch aggregated fields from the table: "transaction_type"
  """
  transaction_type_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_type_order_by!]

    """filter the rows returned"""
    where: transaction_type_bool_exp
  ): transaction_type_aggregate!

  """
  fetch data from the table: "transaction_type" using primary key columns
  """
  transaction_type_by_pk(type: String!): transaction_type

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user

  """
  fetch data from the table: "user_public_view"
  """
  user_public_view(
    """distinct select on columns"""
    distinct_on: [user_public_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_public_view_order_by!]

    """filter the rows returned"""
    where: user_public_view_bool_exp
  ): [user_public_view!]!

  """
  fetch data from the table: "user_role"
  """
  user_role(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): [user_role!]!

  """
  fetch aggregated fields from the table: "user_role"
  """
  user_role_aggregate(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): user_role_aggregate!

  """fetch data from the table: "user_role" using primary key columns"""
  user_role_by_pk(id: Int!): user_role

  """
  fetch data from the table: "user_roles_view"
  """
  user_roles_view(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): [user_roles_view!]!

  """
  fetch aggregated fields from the table: "user_roles_view"
  """
  user_roles_view_aggregate(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): user_roles_view_aggregate!

  """
  fetch data from the table: "xp_view"
  """
  xp_view(
    """distinct select on columns"""
    distinct_on: [xp_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [xp_view_order_by!]

    """filter the rows returned"""
    where: xp_view_bool_exp
  ): [xp_view!]!
}

"""
columns and relationships of "record"
"""
type record {
  """An object relationship"""
  author: user!
  authorId: Int!
  authorLogin: String
  banEndAt: timestamptz
  createdAt: timestamptz!
  id: Int!
  message: String!

  """An object relationship"""
  user: user!
  userId: Int!
  userLogin: String
}

"""
order by aggregate values of table "record"
"""
input record_aggregate_order_by {
  avg: record_avg_order_by
  count: order_by
  max: record_max_order_by
  min: record_min_order_by
  stddev: record_stddev_order_by
  stddev_pop: record_stddev_pop_order_by
  stddev_samp: record_stddev_samp_order_by
  sum: record_sum_order_by
  var_pop: record_var_pop_order_by
  var_samp: record_var_samp_order_by
  variance: record_variance_order_by
}

"""
order by avg() on columns of table "record"
"""
input record_avg_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "record". All fields are combined with a logical 'AND'.
"""
input record_bool_exp {
  _and: [record_bool_exp!]
  _not: record_bool_exp
  _or: [record_bool_exp!]
  author: user_bool_exp
  authorId: Int_comparison_exp
  authorLogin: String_comparison_exp
  banEndAt: timestamptz_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  message: String_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
}

"""
order by max() on columns of table "record"
"""
input record_max_order_by {
  authorId: order_by
  banEndAt: order_by
  createdAt: order_by
  id: order_by
  message: order_by
  userId: order_by
}

"""
order by min() on columns of table "record"
"""
input record_min_order_by {
  authorId: order_by
  banEndAt: order_by
  createdAt: order_by
  id: order_by
  message: order_by
  userId: order_by
}

"""Ordering options when selecting data from "record"."""
input record_order_by {
  author: user_order_by
  authorId: order_by
  authorLogin: order_by
  banEndAt: order_by
  createdAt: order_by
  id: order_by
  message: order_by
  user: user_order_by
  userId: order_by
  userLogin: order_by
}

"""
select columns of table "record"
"""
enum record_select_column {
  """column name"""
  authorId

  """column name"""
  banEndAt

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  message

  """column name"""
  userId
}

"""
order by stddev() on columns of table "record"
"""
input record_stddev_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
order by stddev_pop() on columns of table "record"
"""
input record_stddev_pop_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
order by stddev_samp() on columns of table "record"
"""
input record_stddev_samp_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
Streaming cursor of the table "record"
"""
input record_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: record_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input record_stream_cursor_value_input {
  authorId: Int
  banEndAt: timestamptz
  createdAt: timestamptz
  id: Int
  message: String
  userId: Int
}

"""
order by sum() on columns of table "record"
"""
input record_sum_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
order by var_pop() on columns of table "record"
"""
input record_var_pop_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
order by var_samp() on columns of table "record"
"""
input record_var_samp_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
order by variance() on columns of table "record"
"""
input record_variance_order_by {
  authorId: order_by
  id: order_by
  userId: order_by
}

"""
columns and relationships of "registration"
"""
type registration {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!
  campus: String

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): [registration!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): registration_aggregate!
  createdAt: timestamptz!
  endAt: timestamptz!

  """An object relationship"""
  event: event
  eventStartAt: timestamptz!
  id: Int!

  """An object relationship"""
  object: object!
  objectId: Int!

  """An object relationship"""
  parent: registration
  parentId: Int
  path: String!

  """An object relationship"""
  pathByPath: path!

  """An array relationship"""
  registrationUsers(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): [registration_user!]!

  """An aggregate relationship"""
  registrationUsers_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): registration_user_aggregate!
  startAt: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): [registration_user_view!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): registration_user_view_aggregate!
}

"""
aggregated selection of "registration"
"""
type registration_aggregate {
  aggregate: registration_aggregate_fields
  nodes: [registration!]!
}

input registration_aggregate_bool_exp {
  count: registration_aggregate_bool_exp_count
}

input registration_aggregate_bool_exp_count {
  arguments: [registration_select_column!]
  distinct: Boolean
  filter: registration_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "registration"
"""
type registration_aggregate_fields {
  avg: registration_avg_fields
  count(columns: [registration_select_column!], distinct: Boolean): Int!
  max: registration_max_fields
  min: registration_min_fields
  stddev: registration_stddev_fields
  stddev_pop: registration_stddev_pop_fields
  stddev_samp: registration_stddev_samp_fields
  sum: registration_sum_fields
  var_pop: registration_var_pop_fields
  var_samp: registration_var_samp_fields
  variance: registration_variance_fields
}

"""
order by aggregate values of table "registration"
"""
input registration_aggregate_order_by {
  avg: registration_avg_order_by
  count: order_by
  max: registration_max_order_by
  min: registration_min_order_by
  stddev: registration_stddev_order_by
  stddev_pop: registration_stddev_pop_order_by
  stddev_samp: registration_stddev_samp_order_by
  sum: registration_sum_order_by
  var_pop: registration_var_pop_order_by
  var_samp: registration_var_samp_order_by
  variance: registration_variance_order_by
}

"""aggregate avg on columns"""
type registration_avg_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by avg() on columns of table "registration"
"""
input registration_avg_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""
Boolean expression to filter rows from the table "registration". All fields are combined with a logical 'AND'.
"""
input registration_bool_exp {
  _and: [registration_bool_exp!]
  _not: registration_bool_exp
  _or: [registration_bool_exp!]
  attrs: jsonb_comparison_exp
  campus: String_comparison_exp
  children: registration_bool_exp
  children_aggregate: registration_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  endAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventStartAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  parent: registration_bool_exp
  parentId: Int_comparison_exp
  path: String_comparison_exp
  pathByPath: path_bool_exp
  registrationUsers: registration_user_bool_exp
  registrationUsers_aggregate: registration_user_aggregate_bool_exp
  startAt: timestamptz_comparison_exp
  users: registration_user_view_bool_exp
  users_aggregate: registration_user_view_aggregate_bool_exp
}

"""aggregate max on columns"""
type registration_max_fields {
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  eventStartAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  startAt: timestamptz
}

"""
order by max() on columns of table "registration"
"""
input registration_max_order_by {
  campus: order_by
  createdAt: order_by
  endAt: order_by
  eventStartAt: order_by
  id: order_by
  objectId: order_by
  parentId: order_by
  path: order_by
  startAt: order_by
}

"""aggregate min on columns"""
type registration_min_fields {
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  eventStartAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  startAt: timestamptz
}

"""
order by min() on columns of table "registration"
"""
input registration_min_order_by {
  campus: order_by
  createdAt: order_by
  endAt: order_by
  eventStartAt: order_by
  id: order_by
  objectId: order_by
  parentId: order_by
  path: order_by
  startAt: order_by
}

"""Ordering options when selecting data from "registration"."""
input registration_order_by {
  attrs: order_by
  campus: order_by
  children_aggregate: registration_aggregate_order_by
  createdAt: order_by
  endAt: order_by
  event: event_order_by
  eventStartAt: order_by
  id: order_by
  object: object_order_by
  objectId: order_by
  parent: registration_order_by
  parentId: order_by
  path: order_by
  pathByPath: path_order_by
  registrationUsers_aggregate: registration_user_aggregate_order_by
  startAt: order_by
  users_aggregate: registration_user_view_aggregate_order_by
}

"""
select columns of table "registration"
"""
enum registration_select_column {
  """column name"""
  attrs

  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  endAt

  """column name"""
  eventStartAt

  """column name"""
  id

  """column name"""
  objectId

  """column name"""
  parentId

  """column name"""
  path

  """column name"""
  startAt
}

"""aggregate stddev on columns"""
type registration_stddev_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by stddev() on columns of table "registration"
"""
input registration_stddev_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""aggregate stddev_pop on columns"""
type registration_stddev_pop_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by stddev_pop() on columns of table "registration"
"""
input registration_stddev_pop_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""aggregate stddev_samp on columns"""
type registration_stddev_samp_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by stddev_samp() on columns of table "registration"
"""
input registration_stddev_samp_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""
Streaming cursor of the table "registration"
"""
input registration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: registration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input registration_stream_cursor_value_input {
  attrs: jsonb
  campus: String
  createdAt: timestamptz
  endAt: timestamptz
  eventStartAt: timestamptz
  id: Int
  objectId: Int
  parentId: Int
  path: String
  startAt: timestamptz
}

"""aggregate sum on columns"""
type registration_sum_fields {
  id: Int
  objectId: Int
  parentId: Int
}

"""
order by sum() on columns of table "registration"
"""
input registration_sum_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""
columns and relationships of "registration_user"
"""
type registration_user {
  createdAt: timestamptz!
  id: Int!

  """An object relationship"""
  registration: registration!
  registrationId: Int!

  """An object relationship"""
  user: user!
  userId: Int!
  userLogin: String
}

"""
aggregated selection of "registration_user"
"""
type registration_user_aggregate {
  aggregate: registration_user_aggregate_fields
  nodes: [registration_user!]!
}

input registration_user_aggregate_bool_exp {
  count: registration_user_aggregate_bool_exp_count
}

input registration_user_aggregate_bool_exp_count {
  arguments: [registration_user_select_column!]
  distinct: Boolean
  filter: registration_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "registration_user"
"""
type registration_user_aggregate_fields {
  avg: registration_user_avg_fields
  count(columns: [registration_user_select_column!], distinct: Boolean): Int!
  max: registration_user_max_fields
  min: registration_user_min_fields
  stddev: registration_user_stddev_fields
  stddev_pop: registration_user_stddev_pop_fields
  stddev_samp: registration_user_stddev_samp_fields
  sum: registration_user_sum_fields
  var_pop: registration_user_var_pop_fields
  var_samp: registration_user_var_samp_fields
  variance: registration_user_variance_fields
}

"""
order by aggregate values of table "registration_user"
"""
input registration_user_aggregate_order_by {
  avg: registration_user_avg_order_by
  count: order_by
  max: registration_user_max_order_by
  min: registration_user_min_order_by
  stddev: registration_user_stddev_order_by
  stddev_pop: registration_user_stddev_pop_order_by
  stddev_samp: registration_user_stddev_samp_order_by
  sum: registration_user_sum_order_by
  var_pop: registration_user_var_pop_order_by
  var_samp: registration_user_var_samp_order_by
  variance: registration_user_variance_order_by
}

"""aggregate avg on columns"""
type registration_user_avg_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by avg() on columns of table "registration_user"
"""
input registration_user_avg_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "registration_user". All fields are combined with a logical 'AND'.
"""
input registration_user_bool_exp {
  _and: [registration_user_bool_exp!]
  _not: registration_user_bool_exp
  _or: [registration_user_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  registration: registration_bool_exp
  registrationId: Int_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
}

"""
unique or primary key constraints on table "registration_user"
"""
enum registration_user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  registration_user_pkey

  """
  unique or primary key constraint on columns "registrationId", "userId"
  """
  registration_user_userId_registrationId_key
}

"""
input type for inserting data into table "registration_user"
"""
input registration_user_insert_input {
  registrationId: Int
}

"""aggregate max on columns"""
type registration_user_max_fields {
  createdAt: timestamptz
  id: Int
  registrationId: Int
  userId: Int
}

"""
order by max() on columns of table "registration_user"
"""
input registration_user_max_order_by {
  createdAt: order_by
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type registration_user_min_fields {
  createdAt: timestamptz
  id: Int
  registrationId: Int
  userId: Int
}

"""
order by min() on columns of table "registration_user"
"""
input registration_user_min_order_by {
  createdAt: order_by
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""
response of any mutation on the table "registration_user"
"""
type registration_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [registration_user!]!
}

"""
on_conflict condition type for table "registration_user"
"""
input registration_user_on_conflict {
  constraint: registration_user_constraint!
  update_columns: [registration_user_update_column!]! = []
  where: registration_user_bool_exp
}

"""Ordering options when selecting data from "registration_user"."""
input registration_user_order_by {
  createdAt: order_by
  id: order_by
  registration: registration_order_by
  registrationId: order_by
  user: user_order_by
  userId: order_by
  userLogin: order_by
}

"""
select columns of table "registration_user"
"""
enum registration_user_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  registrationId

  """column name"""
  userId
}

"""aggregate stddev on columns"""
type registration_user_stddev_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by stddev() on columns of table "registration_user"
"""
input registration_user_stddev_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type registration_user_stddev_pop_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "registration_user"
"""
input registration_user_stddev_pop_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type registration_user_stddev_samp_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "registration_user"
"""
input registration_user_stddev_samp_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "registration_user"
"""
input registration_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: registration_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input registration_user_stream_cursor_value_input {
  createdAt: timestamptz
  id: Int
  registrationId: Int
  userId: Int
}

"""aggregate sum on columns"""
type registration_user_sum_fields {
  id: Int
  registrationId: Int
  userId: Int
}

"""
order by sum() on columns of table "registration_user"
"""
input registration_user_sum_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""
placeholder for update columns of table "registration_user" (current role has no relevant permissions)
"""
enum registration_user_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

"""aggregate var_pop on columns"""
type registration_user_var_pop_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "registration_user"
"""
input registration_user_var_pop_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type registration_user_var_samp_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "registration_user"
"""
input registration_user_var_samp_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type registration_user_variance_fields {
  id: Float
  registrationId: Float
  userId: Float
}

"""
order by variance() on columns of table "registration_user"
"""
input registration_user_variance_order_by {
  id: order_by
  registrationId: order_by
  userId: order_by
}

"""
columns and relationships of "registration_user_view"
"""
type registration_user_view {
  createdAt: timestamptz
  id: Int
  position: bigint
  registeredAt: timestamptz

  """An object relationship"""
  registration: registration
  registrationId: Int
  updatedAt: timestamptz
}

"""
aggregated selection of "registration_user_view"
"""
type registration_user_view_aggregate {
  aggregate: registration_user_view_aggregate_fields
  nodes: [registration_user_view!]!
}

input registration_user_view_aggregate_bool_exp {
  count: registration_user_view_aggregate_bool_exp_count
}

input registration_user_view_aggregate_bool_exp_count {
  arguments: [registration_user_view_select_column!]
  distinct: Boolean
  filter: registration_user_view_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "registration_user_view"
"""
type registration_user_view_aggregate_fields {
  avg: registration_user_view_avg_fields
  count(columns: [registration_user_view_select_column!], distinct: Boolean): Int!
  max: registration_user_view_max_fields
  min: registration_user_view_min_fields
  stddev: registration_user_view_stddev_fields
  stddev_pop: registration_user_view_stddev_pop_fields
  stddev_samp: registration_user_view_stddev_samp_fields
  sum: registration_user_view_sum_fields
  var_pop: registration_user_view_var_pop_fields
  var_samp: registration_user_view_var_samp_fields
  variance: registration_user_view_variance_fields
}

"""
order by aggregate values of table "registration_user_view"
"""
input registration_user_view_aggregate_order_by {
  avg: registration_user_view_avg_order_by
  count: order_by
  max: registration_user_view_max_order_by
  min: registration_user_view_min_order_by
  stddev: registration_user_view_stddev_order_by
  stddev_pop: registration_user_view_stddev_pop_order_by
  stddev_samp: registration_user_view_stddev_samp_order_by
  sum: registration_user_view_sum_order_by
  var_pop: registration_user_view_var_pop_order_by
  var_samp: registration_user_view_var_samp_order_by
  variance: registration_user_view_variance_order_by
}

"""aggregate avg on columns"""
type registration_user_view_avg_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by avg() on columns of table "registration_user_view"
"""
input registration_user_view_avg_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""
Boolean expression to filter rows from the table "registration_user_view". All fields are combined with a logical 'AND'.
"""
input registration_user_view_bool_exp {
  _and: [registration_user_view_bool_exp!]
  _not: registration_user_view_bool_exp
  _or: [registration_user_view_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  position: bigint_comparison_exp
  registeredAt: timestamptz_comparison_exp
  registration: registration_bool_exp
  registrationId: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type registration_user_view_max_fields {
  createdAt: timestamptz
  id: Int
  position: bigint
  registeredAt: timestamptz
  registrationId: Int
  updatedAt: timestamptz
}

"""
order by max() on columns of table "registration_user_view"
"""
input registration_user_view_max_order_by {
  createdAt: order_by
  id: order_by
  position: order_by
  registeredAt: order_by
  registrationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type registration_user_view_min_fields {
  createdAt: timestamptz
  id: Int
  position: bigint
  registeredAt: timestamptz
  registrationId: Int
  updatedAt: timestamptz
}

"""
order by min() on columns of table "registration_user_view"
"""
input registration_user_view_min_order_by {
  createdAt: order_by
  id: order_by
  position: order_by
  registeredAt: order_by
  registrationId: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "registration_user_view"."""
input registration_user_view_order_by {
  createdAt: order_by
  id: order_by
  position: order_by
  registeredAt: order_by
  registration: registration_order_by
  registrationId: order_by
  updatedAt: order_by
}

"""
select columns of table "registration_user_view"
"""
enum registration_user_view_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  position

  """column name"""
  registeredAt

  """column name"""
  registrationId

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type registration_user_view_stddev_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by stddev() on columns of table "registration_user_view"
"""
input registration_user_view_stddev_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate stddev_pop on columns"""
type registration_user_view_stddev_pop_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by stddev_pop() on columns of table "registration_user_view"
"""
input registration_user_view_stddev_pop_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate stddev_samp on columns"""
type registration_user_view_stddev_samp_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by stddev_samp() on columns of table "registration_user_view"
"""
input registration_user_view_stddev_samp_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""
Streaming cursor of the table "registration_user_view"
"""
input registration_user_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: registration_user_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input registration_user_view_stream_cursor_value_input {
  createdAt: timestamptz
  id: Int
  position: bigint
  registeredAt: timestamptz
  registrationId: Int
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type registration_user_view_sum_fields {
  id: Int
  position: bigint
  registrationId: Int
}

"""
order by sum() on columns of table "registration_user_view"
"""
input registration_user_view_sum_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate var_pop on columns"""
type registration_user_view_var_pop_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by var_pop() on columns of table "registration_user_view"
"""
input registration_user_view_var_pop_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate var_samp on columns"""
type registration_user_view_var_samp_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by var_samp() on columns of table "registration_user_view"
"""
input registration_user_view_var_samp_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate variance on columns"""
type registration_user_view_variance_fields {
  id: Float
  position: Float
  registrationId: Float
}

"""
order by variance() on columns of table "registration_user_view"
"""
input registration_user_view_variance_order_by {
  id: order_by
  position: order_by
  registrationId: order_by
}

"""aggregate var_pop on columns"""
type registration_var_pop_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by var_pop() on columns of table "registration"
"""
input registration_var_pop_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""aggregate var_samp on columns"""
type registration_var_samp_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by var_samp() on columns of table "registration"
"""
input registration_var_samp_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""aggregate variance on columns"""
type registration_variance_fields {
  id: Float
  objectId: Float
  parentId: Float
}

"""
order by variance() on columns of table "registration"
"""
input registration_variance_order_by {
  id: order_by
  objectId: order_by
  parentId: order_by
}

"""
columns and relationships of "result"
"""
type result {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  audits(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """An aggregate relationship"""
  audits_aggregate(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): audit_aggregate!
  campus: String
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int
  grade: numeric

  """An object relationship"""
  group: group
  groupId: Int
  id: Int!
  isLast: Boolean

  """An object relationship"""
  object: object!
  objectId: Int!
  path: String!
  type: String!
  updatedAt: timestamptz!

  """An object relationship"""
  user: user
  userId: Int
  userLogin: String
  version: String
}

"""
aggregated selection of "result"
"""
type result_aggregate {
  aggregate: result_aggregate_fields
  nodes: [result!]!
}

input result_aggregate_bool_exp {
  bool_and: result_aggregate_bool_exp_bool_and
  bool_or: result_aggregate_bool_exp_bool_or
  count: result_aggregate_bool_exp_count
}

input result_aggregate_bool_exp_bool_and {
  arguments: result_select_column_result_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: result_bool_exp
  predicate: Boolean_comparison_exp!
}

input result_aggregate_bool_exp_bool_or {
  arguments: result_select_column_result_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: result_bool_exp
  predicate: Boolean_comparison_exp!
}

input result_aggregate_bool_exp_count {
  arguments: [result_select_column!]
  distinct: Boolean
  filter: result_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "result"
"""
type result_aggregate_fields {
  avg: result_avg_fields
  count(columns: [result_select_column!], distinct: Boolean): Int!
  max: result_max_fields
  min: result_min_fields
  stddev: result_stddev_fields
  stddev_pop: result_stddev_pop_fields
  stddev_samp: result_stddev_samp_fields
  sum: result_sum_fields
  var_pop: result_var_pop_fields
  var_samp: result_var_samp_fields
  variance: result_variance_fields
}

"""
order by aggregate values of table "result"
"""
input result_aggregate_order_by {
  avg: result_avg_order_by
  count: order_by
  max: result_max_order_by
  min: result_min_order_by
  stddev: result_stddev_order_by
  stddev_pop: result_stddev_pop_order_by
  stddev_samp: result_stddev_samp_order_by
  sum: result_sum_order_by
  var_pop: result_var_pop_order_by
  var_samp: result_var_samp_order_by
  variance: result_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input result_append_input {
  attrs: jsonb
}

"""
input type for inserting array relation for remote table "result"
"""
input result_arr_rel_insert_input {
  data: [result_insert_input!]!

  """upsert condition"""
  on_conflict: result_on_conflict
}

"""aggregate avg on columns"""
type result_avg_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by avg() on columns of table "result"
"""
input result_avg_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "result". All fields are combined with a logical 'AND'.
"""
input result_bool_exp {
  _and: [result_bool_exp!]
  _not: result_bool_exp
  _or: [result_bool_exp!]
  attrs: jsonb_comparison_exp
  audits: audit_bool_exp
  audits_aggregate: audit_aggregate_bool_exp
  campus: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  grade: numeric_comparison_exp
  group: group_bool_exp
  groupId: Int_comparison_exp
  id: Int_comparison_exp
  isLast: Boolean_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  type: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "result"
"""
enum result_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  result_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input result_delete_at_path_input {
  attrs: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input result_delete_elem_input {
  attrs: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input result_delete_key_input {
  attrs: String
}

"""
input type for inserting data into table "result"
"""
input result_insert_input {
  attrs: jsonb
  eventId: Int
  group: group_obj_rel_insert_input
  objectId: Int
  path: String
  version: String
}

"""aggregate max on columns"""
type result_max_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: Int
  objectId: Int
  path: String
  type: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""
order by max() on columns of table "result"
"""
input result_max_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  type: order_by
  updatedAt: order_by
  userId: order_by
  version: order_by
}

"""aggregate min on columns"""
type result_min_fields {
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: Int
  objectId: Int
  path: String
  type: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""
order by min() on columns of table "result"
"""
input result_min_order_by {
  campus: order_by
  createdAt: order_by
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  type: order_by
  updatedAt: order_by
  userId: order_by
  version: order_by
}

"""
response of any mutation on the table "result"
"""
type result_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [result!]!
}

"""
on_conflict condition type for table "result"
"""
input result_on_conflict {
  constraint: result_constraint!
  update_columns: [result_update_column!]! = []
  where: result_bool_exp
}

"""Ordering options when selecting data from "result"."""
input result_order_by {
  attrs: order_by
  audits_aggregate: audit_aggregate_order_by
  campus: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  grade: order_by
  group: group_order_by
  groupId: order_by
  id: order_by
  isLast: order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  type: order_by
  updatedAt: order_by
  user: user_order_by
  userId: order_by
  userLogin: order_by
  version: order_by
}

"""primary key columns input for table: result"""
input result_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input result_prepend_input {
  attrs: jsonb
}

"""
select columns of table "result"
"""
enum result_select_column {
  """column name"""
  attrs

  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  grade

  """column name"""
  groupId

  """column name"""
  id

  """column name"""
  isLast

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  type

  """column name"""
  updatedAt

  """column name"""
  userId

  """column name"""
  version
}

"""
select "result_aggregate_bool_exp_bool_and_arguments_columns" columns of table "result"
"""
enum result_select_column_result_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  isLast
}

"""
select "result_aggregate_bool_exp_bool_or_arguments_columns" columns of table "result"
"""
enum result_select_column_result_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  isLast
}

"""
input type for updating data in table "result"
"""
input result_set_input {
  attrs: jsonb
  version: String
}

"""aggregate stddev on columns"""
type result_stddev_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev() on columns of table "result"
"""
input result_stddev_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type result_stddev_pop_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "result"
"""
input result_stddev_pop_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type result_stddev_samp_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "result"
"""
input result_stddev_samp_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "result"
"""
input result_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: result_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input result_stream_cursor_value_input {
  attrs: jsonb
  campus: String
  createdAt: timestamptz
  eventId: Int
  grade: numeric
  groupId: Int
  id: Int
  isLast: Boolean
  objectId: Int
  path: String
  type: String
  updatedAt: timestamptz
  userId: Int
  version: String
}

"""aggregate sum on columns"""
type result_sum_fields {
  eventId: Int
  grade: numeric
  groupId: Int
  id: Int
  objectId: Int
  userId: Int
}

"""
order by sum() on columns of table "result"
"""
input result_sum_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
update columns of table "result"
"""
enum result_update_column {
  """column name"""
  attrs

  """column name"""
  version
}

input result_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: result_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: result_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: result_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: result_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: result_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: result_set_input
  where: result_bool_exp!
}

"""aggregate var_pop on columns"""
type result_var_pop_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "result"
"""
input result_var_pop_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type result_var_samp_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "result"
"""
input result_var_samp_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type result_variance_fields {
  eventId: Float
  grade: Float
  groupId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by variance() on columns of table "result"
"""
input result_variance_order_by {
  eventId: order_by
  grade: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
columns and relationships of "role"
"""
type role {
  createdAt: timestamptz!
  description: String!
  id: Int!
  name: String!
  slug: String!
  updatedAt: timestamptz!

  """An array relationship"""
  user_roles(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): [user_role!]!

  """An aggregate relationship"""
  user_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): user_role_aggregate!
}

"""
aggregated selection of "role"
"""
type role_aggregate {
  aggregate: role_aggregate_fields
  nodes: [role!]!
}

"""
aggregate fields of "role"
"""
type role_aggregate_fields {
  avg: role_avg_fields
  count(columns: [role_select_column!], distinct: Boolean): Int!
  max: role_max_fields
  min: role_min_fields
  stddev: role_stddev_fields
  stddev_pop: role_stddev_pop_fields
  stddev_samp: role_stddev_samp_fields
  sum: role_sum_fields
  var_pop: role_var_pop_fields
  var_samp: role_var_samp_fields
  variance: role_variance_fields
}

"""aggregate avg on columns"""
type role_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
"""
input role_bool_exp {
  _and: [role_bool_exp!]
  _not: role_bool_exp
  _or: [role_bool_exp!]
  createdAt: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user_roles: user_role_bool_exp
  user_roles_aggregate: user_role_aggregate_bool_exp
}

"""aggregate max on columns"""
type role_max_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type role_min_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
}

"""Ordering options when selecting data from "role"."""
input role_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updatedAt: order_by
  user_roles_aggregate: user_role_aggregate_order_by
}

"""
select columns of table "role"
"""
enum role_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updatedAt
}

"""aggregate stddev on columns"""
type role_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type role_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type role_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "role"
"""
input role_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: role_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input role_stream_cursor_value_input {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type role_sum_fields {
  id: Int
}

"""aggregate var_pop on columns"""
type role_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type role_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type role_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "audit"
  """
  audit(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """
  fetch aggregated fields from the table: "audit"
  """
  audit_aggregate(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): audit_aggregate!

  """fetch data from the table: "audit" using primary key columns"""
  audit_by_pk(id: Int!): audit

  """
  fetch data from the table: "audit_private"
  """
  audit_private(
    """distinct select on columns"""
    distinct_on: [audit_private_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_private_order_by!]

    """filter the rows returned"""
    where: audit_private_bool_exp
  ): [audit_private!]!

  """
  fetch data from the table in a streaming manner: "audit_private"
  """
  audit_private_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [audit_private_stream_cursor_input]!

    """filter the rows returned"""
    where: audit_private_bool_exp
  ): [audit_private!]!

  """
  fetch data from the table in a streaming manner: "audit"
  """
  audit_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [audit_stream_cursor_input]!

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  event_aggregate(
    """distinct select on columns"""
    distinct_on: [event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_order_by!]

    """filter the rows returned"""
    where: event_bool_exp
  ): event_aggregate!

  """fetch data from the table: "event" using primary key columns"""
  event_by_pk(id: Int!): event

  """
  fetch data from the table in a streaming manner: "event"
  """
  event_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_stream_cursor_input]!

    """filter the rows returned"""
    where: event_bool_exp
  ): [event!]!

  """
  fetch data from the table: "event_user"
  """
  event_user(
    """distinct select on columns"""
    distinct_on: [event_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_order_by!]

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!

  """fetch data from the table: "event_user" using primary key columns"""
  event_user_by_pk(id: Int!): event_user

  """
  fetch data from the table in a streaming manner: "event_user"
  """
  event_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_user_stream_cursor_input]!

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!

  """
  fetch data from the table: "event_user_view"
  """
  event_user_view(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): [event_user_view!]!

  """
  fetch aggregated fields from the table: "event_user_view"
  """
  event_user_view_aggregate(
    """distinct select on columns"""
    distinct_on: [event_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_view_order_by!]

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): event_user_view_aggregate!

  """
  fetch data from the table in a streaming manner: "event_user_view"
  """
  event_user_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_user_view_stream_cursor_input]!

    """filter the rows returned"""
    where: event_user_view_bool_exp
  ): [event_user_view!]!

  """
  fetch data from the table: "group"
  """
  group(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """
  fetch aggregated fields from the table: "group"
  """
  group_aggregate(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): group_aggregate!

  """fetch data from the table: "group" using primary key columns"""
  group_by_pk(id: Int!): group

  """
  fetch data from the table in a streaming manner: "group"
  """
  group_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [group_stream_cursor_input]!

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """
  fetch data from the table: "group_user"
  """
  group_user(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): [group_user!]!

  """
  fetch aggregated fields from the table: "group_user"
  """
  group_user_aggregate(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): group_user_aggregate!

  """fetch data from the table: "group_user" using primary key columns"""
  group_user_by_pk(id: Int!): group_user

  """
  fetch data from the table in a streaming manner: "group_user"
  """
  group_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [group_user_stream_cursor_input]!

    """filter the rows returned"""
    where: group_user_bool_exp
  ): [group_user!]!

  """
  fetch data from the table: "label"
  """
  label(
    """distinct select on columns"""
    distinct_on: [label_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_order_by!]

    """filter the rows returned"""
    where: label_bool_exp
  ): [label!]!

  """
  fetch aggregated fields from the table: "label"
  """
  label_aggregate(
    """distinct select on columns"""
    distinct_on: [label_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_order_by!]

    """filter the rows returned"""
    where: label_bool_exp
  ): label_aggregate!

  """fetch data from the table: "label" using primary key columns"""
  label_by_pk(id: Int!): label

  """
  fetch data from the table in a streaming manner: "label"
  """
  label_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [label_stream_cursor_input]!

    """filter the rows returned"""
    where: label_bool_exp
  ): [label!]!

  """
  fetch data from the table: "label_user"
  """
  label_user(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """
  fetch aggregated fields from the table: "label_user"
  """
  label_user_aggregate(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): label_user_aggregate!

  """fetch data from the table: "label_user" using primary key columns"""
  label_user_by_pk(id: Int!): label_user

  """
  fetch data from the table in a streaming manner: "label_user"
  """
  label_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [label_user_stream_cursor_input]!

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """
  fetch data from the table: "match"
  """
  match(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """
  fetch aggregated fields from the table: "match"
  """
  match_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """fetch data from the table: "match" using primary key columns"""
  match_by_pk(id: Int!): match

  """
  fetch data from the table in a streaming manner: "match"
  """
  match_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [match_stream_cursor_input]!

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """
  fetch data from the table: "object"
  """
  object(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """
  fetch aggregated fields from the table: "object"
  """
  object_aggregate(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): object_aggregate!

  """fetch data from the table: "object" using primary key columns"""
  object_by_pk(id: Int!): object

  """
  fetch data from the table: "object_child"
  """
  object_child(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): [object_child!]!

  """
  fetch aggregated fields from the table: "object_child"
  """
  object_child_aggregate(
    """distinct select on columns"""
    distinct_on: [object_child_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_child_order_by!]

    """filter the rows returned"""
    where: object_child_bool_exp
  ): object_child_aggregate!

  """fetch data from the table: "object_child" using primary key columns"""
  object_child_by_pk(id: Int!): object_child

  """
  fetch data from the table in a streaming manner: "object_child"
  """
  object_child_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [object_child_stream_cursor_input]!

    """filter the rows returned"""
    where: object_child_bool_exp
  ): [object_child!]!

  """
  fetch data from the table in a streaming manner: "object"
  """
  object_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [object_stream_cursor_input]!

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """
  fetch data from the table: "object_type"
  """
  object_type(
    """distinct select on columns"""
    distinct_on: [object_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_type_order_by!]

    """filter the rows returned"""
    where: object_type_bool_exp
  ): [object_type!]!

  """
  fetch aggregated fields from the table: "object_type"
  """
  object_type_aggregate(
    """distinct select on columns"""
    distinct_on: [object_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_type_order_by!]

    """filter the rows returned"""
    where: object_type_bool_exp
  ): object_type_aggregate!

  """fetch data from the table: "object_type" using primary key columns"""
  object_type_by_pk(type: String!): object_type

  """
  fetch data from the table in a streaming manner: "object_type"
  """
  object_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [object_type_stream_cursor_input]!

    """filter the rows returned"""
    where: object_type_bool_exp
  ): [object_type!]!

  """
  fetch data from the table: "path"
  """
  path(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): [path!]!

  """
  fetch aggregated fields from the table: "path"
  """
  path_aggregate(
    """distinct select on columns"""
    distinct_on: [path_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_order_by!]

    """filter the rows returned"""
    where: path_bool_exp
  ): path_aggregate!

  """
  fetch data from the table: "path_archive"
  """
  path_archive(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): [path_archive!]!

  """
  fetch aggregated fields from the table: "path_archive"
  """
  path_archive_aggregate(
    """distinct select on columns"""
    distinct_on: [path_archive_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [path_archive_order_by!]

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): path_archive_aggregate!

  """fetch data from the table: "path_archive" using primary key columns"""
  path_archive_by_pk(id: Int!): path_archive

  """
  fetch data from the table in a streaming manner: "path_archive"
  """
  path_archive_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [path_archive_stream_cursor_input]!

    """filter the rows returned"""
    where: path_archive_bool_exp
  ): [path_archive!]!

  """fetch data from the table: "path" using primary key columns"""
  path_by_pk(path: String!): path

  """
  fetch data from the table in a streaming manner: "path"
  """
  path_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [path_stream_cursor_input]!

    """filter the rows returned"""
    where: path_bool_exp
  ): [path!]!

  """
  fetch data from the table: "progress"
  """
  progress(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """
  fetch aggregated fields from the table: "progress"
  """
  progress_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """
  fetch data from the table: "progress_by_path_view"
  """
  progress_by_path_view(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): [progress_by_path_view!]!

  """
  fetch aggregated fields from the table: "progress_by_path_view"
  """
  progress_by_path_view_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): progress_by_path_view_aggregate!

  """
  fetch data from the table in a streaming manner: "progress_by_path_view"
  """
  progress_by_path_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [progress_by_path_view_stream_cursor_input]!

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): [progress_by_path_view!]!

  """fetch data from the table: "progress" using primary key columns"""
  progress_by_pk(id: bigint!): progress

  """
  fetch data from the table in a streaming manner: "progress"
  """
  progress_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [progress_stream_cursor_input]!

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """
  fetch data from the table: "record"
  """
  record(
    """distinct select on columns"""
    distinct_on: [record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [record_order_by!]

    """filter the rows returned"""
    where: record_bool_exp
  ): [record!]!

  """fetch data from the table: "record" using primary key columns"""
  record_by_pk(id: Int!): record

  """
  fetch data from the table in a streaming manner: "record"
  """
  record_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [record_stream_cursor_input]!

    """filter the rows returned"""
    where: record_bool_exp
  ): [record!]!

  """
  fetch data from the table: "registration"
  """
  registration(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): [registration!]!

  """
  fetch aggregated fields from the table: "registration"
  """
  registration_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_order_by!]

    """filter the rows returned"""
    where: registration_bool_exp
  ): registration_aggregate!

  """fetch data from the table: "registration" using primary key columns"""
  registration_by_pk(id: Int!): registration

  """
  fetch data from the table in a streaming manner: "registration"
  """
  registration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [registration_stream_cursor_input]!

    """filter the rows returned"""
    where: registration_bool_exp
  ): [registration!]!

  """
  fetch data from the table: "registration_user"
  """
  registration_user(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): [registration_user!]!

  """
  fetch aggregated fields from the table: "registration_user"
  """
  registration_user_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): registration_user_aggregate!

  """
  fetch data from the table: "registration_user" using primary key columns
  """
  registration_user_by_pk(id: Int!): registration_user

  """
  fetch data from the table in a streaming manner: "registration_user"
  """
  registration_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [registration_user_stream_cursor_input]!

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): [registration_user!]!

  """
  fetch data from the table: "registration_user_view"
  """
  registration_user_view(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): [registration_user_view!]!

  """
  fetch aggregated fields from the table: "registration_user_view"
  """
  registration_user_view_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_view_order_by!]

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): registration_user_view_aggregate!

  """
  fetch data from the table in a streaming manner: "registration_user_view"
  """
  registration_user_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [registration_user_view_stream_cursor_input]!

    """filter the rows returned"""
    where: registration_user_view_bool_exp
  ): [registration_user_view!]!

  """
  fetch data from the table: "result"
  """
  result(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """
  fetch aggregated fields from the table: "result"
  """
  result_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!

  """fetch data from the table: "result" using primary key columns"""
  result_by_pk(id: Int!): result

  """
  fetch data from the table in a streaming manner: "result"
  """
  result_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [result_stream_cursor_input]!

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(id: Int!): role

  """
  fetch data from the table in a streaming manner: "role"
  """
  role_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [role_stream_cursor_input]!

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(id: Int!): task

  """
  fetch data from the table in a streaming manner: "task"
  """
  task_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [task_stream_cursor_input]!

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch data from the table: "timing"
  """
  timing(
    """distinct select on columns"""
    distinct_on: [timing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timing_order_by!]

    """filter the rows returned"""
    where: timing_bool_exp
  ): [timing!]!

  """
  fetch data from the table in a streaming manner: "timing"
  """
  timing_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [timing_stream_cursor_input]!

    """filter the rows returned"""
    where: timing_bool_exp
  ): [timing!]!

  """
  execute function "timings" which returns "timing"
  """
  timings(
    """
    input parameters for function "timings"
    """
    args: timings_args!

    """distinct select on columns"""
    distinct_on: [timing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timing_order_by!]

    """filter the rows returned"""
    where: timing_bool_exp
  ): timing

  """
  fetch data from the table: "toad.campaign_games"
  """
  toad_campaign_games(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): [toad_campaign_games!]!

  """
  fetch aggregated fields from the table: "toad.campaign_games"
  """
  toad_campaign_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): toad_campaign_games_aggregate!

  """
  fetch data from the table: "toad.campaign_games" using primary key columns
  """
  toad_campaign_games_by_pk(id: Int!): toad_campaign_games

  """
  fetch data from the table in a streaming manner: "toad.campaign_games"
  """
  toad_campaign_games_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_campaign_games_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): [toad_campaign_games!]!

  """
  fetch data from the table: "toad.campaigns"
  """
  toad_campaigns(
    """distinct select on columns"""
    distinct_on: [toad_campaigns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaigns_order_by!]

    """filter the rows returned"""
    where: toad_campaigns_bool_exp
  ): [toad_campaigns!]!

  """fetch data from the table: "toad.campaigns" using primary key columns"""
  toad_campaigns_by_pk(id: uuid!): toad_campaigns

  """
  fetch data from the table in a streaming manner: "toad.campaigns"
  """
  toad_campaigns_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_campaigns_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_campaigns_bool_exp
  ): [toad_campaigns!]!

  """
  fetch data from the table: "toad.games"
  """
  toad_games(
    """distinct select on columns"""
    distinct_on: [toad_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_games_order_by!]

    """filter the rows returned"""
    where: toad_games_bool_exp
  ): [toad_games!]!

  """
  fetch aggregated fields from the table: "toad.games"
  """
  toad_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_games_order_by!]

    """filter the rows returned"""
    where: toad_games_bool_exp
  ): toad_games_aggregate!

  """fetch data from the table: "toad.games" using primary key columns"""
  toad_games_by_pk(id: uuid!): toad_games

  """
  fetch data from the table in a streaming manner: "toad.games"
  """
  toad_games_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_games_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_games_bool_exp
  ): [toad_games!]!

  """
  fetch data from the table: "toad.session_game_results"
  """
  toad_session_game_results(
    """distinct select on columns"""
    distinct_on: [toad_session_game_results_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_game_results_order_by!]

    """filter the rows returned"""
    where: toad_session_game_results_bool_exp
  ): [toad_session_game_results!]!

  """
  fetch data from the table: "toad.session_game_results" using primary key columns
  """
  toad_session_game_results_by_pk(id: Int!): toad_session_game_results

  """
  fetch data from the table in a streaming manner: "toad.session_game_results"
  """
  toad_session_game_results_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_session_game_results_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_session_game_results_bool_exp
  ): [toad_session_game_results!]!

  """
  fetch data from the table: "toad.session_games"
  """
  toad_session_games(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): [toad_session_games!]!

  """
  fetch aggregated fields from the table: "toad.session_games"
  """
  toad_session_games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): toad_session_games_aggregate!

  """
  fetch data from the table: "toad.session_games" using primary key columns
  """
  toad_session_games_by_pk(id: Int!): toad_session_games

  """
  fetch data from the table in a streaming manner: "toad.session_games"
  """
  toad_session_games_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_session_games_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): [toad_session_games!]!

  """
  fetch data from the table: "toad.sessions"
  """
  toad_sessions(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): [toad_sessions!]!

  """
  fetch aggregated fields from the table: "toad.sessions"
  """
  toad_sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): toad_sessions_aggregate!

  """fetch data from the table: "toad.sessions" using primary key columns"""
  toad_sessions_by_pk(id: uuid!): toad_sessions

  """
  fetch data from the table in a streaming manner: "toad.sessions"
  """
  toad_sessions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [toad_sessions_stream_cursor_input]!

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): [toad_sessions!]!

  """
  fetch data from the table: "transaction"
  """
  transaction(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): [transaction!]!

  """
  fetch aggregated fields from the table: "transaction"
  """
  transaction_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): transaction_aggregate!

  """fetch data from the table: "transaction" using primary key columns"""
  transaction_by_pk(id: Int!): transaction

  """
  fetch data from the table in a streaming manner: "transaction"
  """
  transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: transaction_bool_exp
  ): [transaction!]!

  """
  fetch data from the table: "transaction_type"
  """
  transaction_type(
    """distinct select on columns"""
    distinct_on: [transaction_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_type_order_by!]

    """filter the rows returned"""
    where: transaction_type_bool_exp
  ): [transaction_type!]!

  """
  fetch aggregated fields from the table: "transaction_type"
  """
  transaction_type_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_type_order_by!]

    """filter the rows returned"""
    where: transaction_type_bool_exp
  ): transaction_type_aggregate!

  """
  fetch data from the table: "transaction_type" using primary key columns
  """
  transaction_type_by_pk(type: String!): transaction_type

  """
  fetch data from the table in a streaming manner: "transaction_type"
  """
  transaction_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transaction_type_stream_cursor_input]!

    """filter the rows returned"""
    where: transaction_type_bool_exp
  ): [transaction_type!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user

  """
  fetch data from the table: "user_public_view"
  """
  user_public_view(
    """distinct select on columns"""
    distinct_on: [user_public_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_public_view_order_by!]

    """filter the rows returned"""
    where: user_public_view_bool_exp
  ): [user_public_view!]!

  """
  fetch data from the table in a streaming manner: "user_public_view"
  """
  user_public_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_public_view_stream_cursor_input]!

    """filter the rows returned"""
    where: user_public_view_bool_exp
  ): [user_public_view!]!

  """
  fetch data from the table: "user_role"
  """
  user_role(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): [user_role!]!

  """
  fetch aggregated fields from the table: "user_role"
  """
  user_role_aggregate(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): user_role_aggregate!

  """fetch data from the table: "user_role" using primary key columns"""
  user_role_by_pk(id: Int!): user_role

  """
  fetch data from the table in a streaming manner: "user_role"
  """
  user_role_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_role_stream_cursor_input]!

    """filter the rows returned"""
    where: user_role_bool_exp
  ): [user_role!]!

  """
  fetch data from the table: "user_roles_view"
  """
  user_roles_view(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): [user_roles_view!]!

  """
  fetch aggregated fields from the table: "user_roles_view"
  """
  user_roles_view_aggregate(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): user_roles_view_aggregate!

  """
  fetch data from the table in a streaming manner: "user_roles_view"
  """
  user_roles_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_roles_view_stream_cursor_input]!

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): [user_roles_view!]!

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch data from the table: "xp_view"
  """
  xp_view(
    """distinct select on columns"""
    distinct_on: [xp_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [xp_view_order_by!]

    """filter the rows returned"""
    where: xp_view_bool_exp
  ): [xp_view!]!

  """
  fetch data from the table in a streaming manner: "xp_view"
  """
  xp_view_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [xp_view_stream_cursor_input]!

    """filter the rows returned"""
    where: xp_view_bool_exp
  ): [xp_view!]!
}

"""
columns and relationships of "task"
"""
type task {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int

  """An object relationship"""
  group: group
  groupId: Int
  id: Int!
  name: String!

  """An object relationship"""
  object: object
  objectId: Int
  output: String
  path: String
  status: String!
  updatedAt: timestamptz!
}

"""
order by aggregate values of table "task"
"""
input task_aggregate_order_by {
  avg: task_avg_order_by
  count: order_by
  max: task_max_order_by
  min: task_min_order_by
  stddev: task_stddev_order_by
  stddev_pop: task_stddev_pop_order_by
  stddev_samp: task_stddev_samp_order_by
  sum: task_sum_order_by
  var_pop: task_var_pop_order_by
  var_samp: task_var_samp_order_by
  variance: task_variance_order_by
}

"""
order by avg() on columns of table "task"
"""
input task_avg_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'.
"""
input task_bool_exp {
  _and: [task_bool_exp!]
  _not: task_bool_exp
  _or: [task_bool_exp!]
  attrs: jsonb_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  group: group_bool_exp
  groupId: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  output: String_comparison_exp
  path: String_comparison_exp
  status: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
order by max() on columns of table "task"
"""
input task_max_order_by {
  createdAt: order_by
  eventId: order_by
  groupId: order_by
  id: order_by
  name: order_by
  objectId: order_by
  output: order_by
  path: order_by
  status: order_by
  updatedAt: order_by
}

"""
order by min() on columns of table "task"
"""
input task_min_order_by {
  createdAt: order_by
  eventId: order_by
  groupId: order_by
  id: order_by
  name: order_by
  objectId: order_by
  output: order_by
  path: order_by
  status: order_by
  updatedAt: order_by
}

"""Ordering options when selecting data from "task"."""
input task_order_by {
  attrs: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  group: group_order_by
  groupId: order_by
  id: order_by
  name: order_by
  object: object_order_by
  objectId: order_by
  output: order_by
  path: order_by
  status: order_by
  updatedAt: order_by
}

"""
select columns of table "task"
"""
enum task_select_column {
  """column name"""
  attrs

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  groupId

  """column name"""
  id

  """column name"""
  name

  """column name"""
  objectId

  """column name"""
  output

  """column name"""
  path

  """column name"""
  status

  """column name"""
  updatedAt
}

"""
order by stddev() on columns of table "task"
"""
input task_stddev_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
order by stddev_pop() on columns of table "task"
"""
input task_stddev_pop_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
order by stddev_samp() on columns of table "task"
"""
input task_stddev_samp_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
Streaming cursor of the table "task"
"""
input task_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: task_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input task_stream_cursor_value_input {
  attrs: jsonb
  createdAt: timestamptz
  eventId: Int
  groupId: Int
  id: Int
  name: String
  objectId: Int
  output: String
  path: String
  status: String
  updatedAt: timestamptz
}

"""
order by sum() on columns of table "task"
"""
input task_sum_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
order by var_pop() on columns of table "task"
"""
input task_var_pop_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
order by var_samp() on columns of table "task"
"""
input task_var_samp_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

"""
order by variance() on columns of table "task"
"""
input task_variance_order_by {
  eventId: order_by
  groupId: order_by
  id: order_by
  objectId: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "timing"
"""
type timing {
  audit: timestamptz
  event: timestamptz
  group: timestamptz
  match: timestamptz
  progress: timestamptz
  record: timestamptz
  registration: timestamptz
  transaction: timestamptz
  user: timestamptz
}

"""
Boolean expression to filter rows from the table "timing". All fields are combined with a logical 'AND'.
"""
input timing_bool_exp {
  _and: [timing_bool_exp!]
  _not: timing_bool_exp
  _or: [timing_bool_exp!]
  audit: timestamptz_comparison_exp
  event: timestamptz_comparison_exp
  group: timestamptz_comparison_exp
  match: timestamptz_comparison_exp
  progress: timestamptz_comparison_exp
  record: timestamptz_comparison_exp
  registration: timestamptz_comparison_exp
  transaction: timestamptz_comparison_exp
  user: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "timing"."""
input timing_order_by {
  audit: order_by
  event: order_by
  group: order_by
  match: order_by
  progress: order_by
  record: order_by
  registration: order_by
  transaction: order_by
  user: order_by
}

"""
select columns of table "timing"
"""
enum timing_select_column {
  """column name"""
  audit

  """column name"""
  event

  """column name"""
  group

  """column name"""
  match

  """column name"""
  progress

  """column name"""
  record

  """column name"""
  registration

  """column name"""
  transaction

  """column name"""
  user
}

"""
Streaming cursor of the table "timing"
"""
input timing_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: timing_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input timing_stream_cursor_value_input {
  audit: timestamptz
  event: timestamptz
  group: timestamptz
  match: timestamptz
  progress: timestamptz
  record: timestamptz
  registration: timestamptz
  transaction: timestamptz
  user: timestamptz
}

input timings_args {
  userId: Int
}

"""
columns and relationships of "toad.campaign_games"
"""
type toad_campaign_games {
  """An object relationship"""
  campaign: toad_campaigns!
  campaign_id: uuid!
  game_id: uuid!
  id: Int!
  overriden_duration: Int
  overriden_points: Int
  position: Int!

  """An object relationship"""
  ref: toad_games!
}

"""
aggregated selection of "toad.campaign_games"
"""
type toad_campaign_games_aggregate {
  aggregate: toad_campaign_games_aggregate_fields
  nodes: [toad_campaign_games!]!
}

input toad_campaign_games_aggregate_bool_exp {
  count: toad_campaign_games_aggregate_bool_exp_count
}

input toad_campaign_games_aggregate_bool_exp_count {
  arguments: [toad_campaign_games_select_column!]
  distinct: Boolean
  filter: toad_campaign_games_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "toad.campaign_games"
"""
type toad_campaign_games_aggregate_fields {
  avg: toad_campaign_games_avg_fields
  count(columns: [toad_campaign_games_select_column!], distinct: Boolean): Int!
  max: toad_campaign_games_max_fields
  min: toad_campaign_games_min_fields
  stddev: toad_campaign_games_stddev_fields
  stddev_pop: toad_campaign_games_stddev_pop_fields
  stddev_samp: toad_campaign_games_stddev_samp_fields
  sum: toad_campaign_games_sum_fields
  var_pop: toad_campaign_games_var_pop_fields
  var_samp: toad_campaign_games_var_samp_fields
  variance: toad_campaign_games_variance_fields
}

"""
order by aggregate values of table "toad.campaign_games"
"""
input toad_campaign_games_aggregate_order_by {
  avg: toad_campaign_games_avg_order_by
  count: order_by
  max: toad_campaign_games_max_order_by
  min: toad_campaign_games_min_order_by
  stddev: toad_campaign_games_stddev_order_by
  stddev_pop: toad_campaign_games_stddev_pop_order_by
  stddev_samp: toad_campaign_games_stddev_samp_order_by
  sum: toad_campaign_games_sum_order_by
  var_pop: toad_campaign_games_var_pop_order_by
  var_samp: toad_campaign_games_var_samp_order_by
  variance: toad_campaign_games_variance_order_by
}

"""aggregate avg on columns"""
type toad_campaign_games_avg_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by avg() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_avg_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""
Boolean expression to filter rows from the table "toad.campaign_games". All fields are combined with a logical 'AND'.
"""
input toad_campaign_games_bool_exp {
  _and: [toad_campaign_games_bool_exp!]
  _not: toad_campaign_games_bool_exp
  _or: [toad_campaign_games_bool_exp!]
  campaign: toad_campaigns_bool_exp
  campaign_id: uuid_comparison_exp
  game_id: uuid_comparison_exp
  id: Int_comparison_exp
  overriden_duration: Int_comparison_exp
  overriden_points: Int_comparison_exp
  position: Int_comparison_exp
  ref: toad_games_bool_exp
}

"""aggregate max on columns"""
type toad_campaign_games_max_fields {
  campaign_id: uuid
  game_id: uuid
  id: Int
  overriden_duration: Int
  overriden_points: Int
  position: Int
}

"""
order by max() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_max_order_by {
  campaign_id: order_by
  game_id: order_by
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate min on columns"""
type toad_campaign_games_min_fields {
  campaign_id: uuid
  game_id: uuid
  id: Int
  overriden_duration: Int
  overriden_points: Int
  position: Int
}

"""
order by min() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_min_order_by {
  campaign_id: order_by
  game_id: order_by
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""Ordering options when selecting data from "toad.campaign_games"."""
input toad_campaign_games_order_by {
  campaign: toad_campaigns_order_by
  campaign_id: order_by
  game_id: order_by
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
  ref: toad_games_order_by
}

"""
select columns of table "toad.campaign_games"
"""
enum toad_campaign_games_select_column {
  """column name"""
  campaign_id

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  overriden_duration

  """column name"""
  overriden_points

  """column name"""
  position
}

"""aggregate stddev on columns"""
type toad_campaign_games_stddev_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by stddev() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_stddev_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate stddev_pop on columns"""
type toad_campaign_games_stddev_pop_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by stddev_pop() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_stddev_pop_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate stddev_samp on columns"""
type toad_campaign_games_stddev_samp_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by stddev_samp() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_stddev_samp_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""
Streaming cursor of the table "toad_campaign_games"
"""
input toad_campaign_games_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_campaign_games_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_campaign_games_stream_cursor_value_input {
  campaign_id: uuid
  game_id: uuid
  id: Int
  overriden_duration: Int
  overriden_points: Int
  position: Int
}

"""aggregate sum on columns"""
type toad_campaign_games_sum_fields {
  id: Int
  overriden_duration: Int
  overriden_points: Int
  position: Int
}

"""
order by sum() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_sum_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate var_pop on columns"""
type toad_campaign_games_var_pop_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by var_pop() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_var_pop_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate var_samp on columns"""
type toad_campaign_games_var_samp_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by var_samp() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_var_samp_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""aggregate variance on columns"""
type toad_campaign_games_variance_fields {
  id: Float
  overriden_duration: Float
  overriden_points: Float
  position: Float
}

"""
order by variance() on columns of table "toad.campaign_games"
"""
input toad_campaign_games_variance_order_by {
  id: order_by
  overriden_duration: order_by
  overriden_points: order_by
  position: order_by
}

"""
columns and relationships of "toad.campaigns"
"""
type toad_campaigns {
  attempts: Int!
  created_at: timestamptz!

  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): [toad_campaign_games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): toad_campaign_games_aggregate!
  id: uuid!
  instructions: String

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): [toad_sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): toad_sessions_aggregate!
  title: String!

  """An object relationship"""
  user: user
  user_id: Int!
}

"""
Boolean expression to filter rows from the table "toad.campaigns". All fields are combined with a logical 'AND'.
"""
input toad_campaigns_bool_exp {
  _and: [toad_campaigns_bool_exp!]
  _not: toad_campaigns_bool_exp
  _or: [toad_campaigns_bool_exp!]
  attempts: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  games: toad_campaign_games_bool_exp
  games_aggregate: toad_campaign_games_aggregate_bool_exp
  id: uuid_comparison_exp
  instructions: String_comparison_exp
  sessions: toad_sessions_bool_exp
  sessions_aggregate: toad_sessions_aggregate_bool_exp
  title: String_comparison_exp
  user: user_bool_exp
  user_id: Int_comparison_exp
}

"""Ordering options when selecting data from "toad.campaigns"."""
input toad_campaigns_order_by {
  attempts: order_by
  created_at: order_by
  games_aggregate: toad_campaign_games_aggregate_order_by
  id: order_by
  instructions: order_by
  sessions_aggregate: toad_sessions_aggregate_order_by
  title: order_by
  user: user_order_by
  user_id: order_by
}

"""
select columns of table "toad.campaigns"
"""
enum toad_campaigns_select_column {
  """column name"""
  attempts

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  instructions

  """column name"""
  title

  """column name"""
  user_id
}

"""
Streaming cursor of the table "toad_campaigns"
"""
input toad_campaigns_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_campaigns_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_campaigns_stream_cursor_value_input {
  attempts: Int
  created_at: timestamptz
  id: uuid
  instructions: String
  title: String
  user_id: Int
}

"""
columns and relationships of "toad.games"
"""
type toad_games {
  """An array relationship"""
  campaigns(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): [toad_campaign_games!]!

  """An aggregate relationship"""
  campaigns_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_campaign_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_campaign_games_order_by!]

    """filter the rows returned"""
    where: toad_campaign_games_bool_exp
  ): toad_campaign_games_aggregate!
  duration: Int!
  id: uuid!
  name: String!
  points: Int!
}

"""
aggregated selection of "toad.games"
"""
type toad_games_aggregate {
  aggregate: toad_games_aggregate_fields
  nodes: [toad_games!]!
}

"""
aggregate fields of "toad.games"
"""
type toad_games_aggregate_fields {
  avg: toad_games_avg_fields
  count(columns: [toad_games_select_column!], distinct: Boolean): Int!
  max: toad_games_max_fields
  min: toad_games_min_fields
  stddev: toad_games_stddev_fields
  stddev_pop: toad_games_stddev_pop_fields
  stddev_samp: toad_games_stddev_samp_fields
  sum: toad_games_sum_fields
  var_pop: toad_games_var_pop_fields
  var_samp: toad_games_var_samp_fields
  variance: toad_games_variance_fields
}

"""aggregate avg on columns"""
type toad_games_avg_fields {
  duration: Float
  points: Float
}

"""
Boolean expression to filter rows from the table "toad.games". All fields are combined with a logical 'AND'.
"""
input toad_games_bool_exp {
  _and: [toad_games_bool_exp!]
  _not: toad_games_bool_exp
  _or: [toad_games_bool_exp!]
  campaigns: toad_campaign_games_bool_exp
  campaigns_aggregate: toad_campaign_games_aggregate_bool_exp
  duration: Int_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  points: Int_comparison_exp
}

"""aggregate max on columns"""
type toad_games_max_fields {
  duration: Int
  id: uuid
  name: String
  points: Int
}

"""aggregate min on columns"""
type toad_games_min_fields {
  duration: Int
  id: uuid
  name: String
  points: Int
}

"""Ordering options when selecting data from "toad.games"."""
input toad_games_order_by {
  campaigns_aggregate: toad_campaign_games_aggregate_order_by
  duration: order_by
  id: order_by
  name: order_by
  points: order_by
}

"""
select columns of table "toad.games"
"""
enum toad_games_select_column {
  """column name"""
  duration

  """column name"""
  id

  """column name"""
  name

  """column name"""
  points
}

"""aggregate stddev on columns"""
type toad_games_stddev_fields {
  duration: Float
  points: Float
}

"""aggregate stddev_pop on columns"""
type toad_games_stddev_pop_fields {
  duration: Float
  points: Float
}

"""aggregate stddev_samp on columns"""
type toad_games_stddev_samp_fields {
  duration: Float
  points: Float
}

"""
Streaming cursor of the table "toad_games"
"""
input toad_games_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_games_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_games_stream_cursor_value_input {
  duration: Int
  id: uuid
  name: String
  points: Int
}

"""aggregate sum on columns"""
type toad_games_sum_fields {
  duration: Int
  points: Int
}

"""aggregate var_pop on columns"""
type toad_games_var_pop_fields {
  duration: Float
  points: Float
}

"""aggregate var_samp on columns"""
type toad_games_var_samp_fields {
  duration: Float
  points: Float
}

"""aggregate variance on columns"""
type toad_games_variance_fields {
  duration: Float
  points: Float
}

"""
columns and relationships of "toad.session_game_results"
"""
type toad_session_game_results {
  attempts: Int!
  id: Int!
  level: Int!

  """An object relationship"""
  result: toad_session_games!
  session_game_id: Int!
}

"""
order by aggregate values of table "toad.session_game_results"
"""
input toad_session_game_results_aggregate_order_by {
  avg: toad_session_game_results_avg_order_by
  count: order_by
  max: toad_session_game_results_max_order_by
  min: toad_session_game_results_min_order_by
  stddev: toad_session_game_results_stddev_order_by
  stddev_pop: toad_session_game_results_stddev_pop_order_by
  stddev_samp: toad_session_game_results_stddev_samp_order_by
  sum: toad_session_game_results_sum_order_by
  var_pop: toad_session_game_results_var_pop_order_by
  var_samp: toad_session_game_results_var_samp_order_by
  variance: toad_session_game_results_variance_order_by
}

"""
input type for inserting array relation for remote table "toad.session_game_results"
"""
input toad_session_game_results_arr_rel_insert_input {
  data: [toad_session_game_results_insert_input!]!

  """upsert condition"""
  on_conflict: toad_session_game_results_on_conflict
}

"""
order by avg() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_avg_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
Boolean expression to filter rows from the table "toad.session_game_results". All fields are combined with a logical 'AND'.
"""
input toad_session_game_results_bool_exp {
  _and: [toad_session_game_results_bool_exp!]
  _not: toad_session_game_results_bool_exp
  _or: [toad_session_game_results_bool_exp!]
  attempts: Int_comparison_exp
  id: Int_comparison_exp
  level: Int_comparison_exp
  result: toad_session_games_bool_exp
  session_game_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "toad.session_game_results"
"""
enum toad_session_game_results_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  session_game_results_pkey

  """
  unique or primary key constraint on columns "session_game_id", "level"
  """
  session_game_results_session_game_id_level_key
}

"""
input type for inserting data into table "toad.session_game_results"
"""
input toad_session_game_results_insert_input {
  attempts: Int
  level: Int
  result: toad_session_games_obj_rel_insert_input
  session_game_id: Int
}

"""
order by max() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_max_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
order by min() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_min_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
response of any mutation on the table "toad.session_game_results"
"""
type toad_session_game_results_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [toad_session_game_results!]!
}

"""
on_conflict condition type for table "toad.session_game_results"
"""
input toad_session_game_results_on_conflict {
  constraint: toad_session_game_results_constraint!
  update_columns: [toad_session_game_results_update_column!]! = []
  where: toad_session_game_results_bool_exp
}

"""Ordering options when selecting data from "toad.session_game_results"."""
input toad_session_game_results_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  result: toad_session_games_order_by
  session_game_id: order_by
}

"""primary key columns input for table: toad.session_game_results"""
input toad_session_game_results_pk_columns_input {
  id: Int!
}

"""
select columns of table "toad.session_game_results"
"""
enum toad_session_game_results_select_column {
  """column name"""
  attempts

  """column name"""
  id

  """column name"""
  level

  """column name"""
  session_game_id
}

"""
order by stddev() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_stddev_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
order by stddev_pop() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_stddev_pop_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
order by stddev_samp() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_stddev_samp_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
Streaming cursor of the table "toad_session_game_results"
"""
input toad_session_game_results_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_session_game_results_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_session_game_results_stream_cursor_value_input {
  attempts: Int
  id: Int
  level: Int
  session_game_id: Int
}

"""
order by sum() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_sum_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
placeholder for update columns of table "toad.session_game_results" (current role has no relevant permissions)
"""
enum toad_session_game_results_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

input toad_session_game_results_updates {
  where: toad_session_game_results_bool_exp!
}

"""
order by var_pop() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_var_pop_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
order by var_samp() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_var_samp_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
order by variance() on columns of table "toad.session_game_results"
"""
input toad_session_game_results_variance_order_by {
  attempts: order_by
  id: order_by
  level: order_by
  session_game_id: order_by
}

"""
columns and relationships of "toad.session_games"
"""
type toad_session_games {
  duration: Int!
  game_id: uuid!
  id: Int!
  name: String!
  points: Int!
  position: Int

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [toad_session_game_results_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_game_results_order_by!]

    """filter the rows returned"""
    where: toad_session_game_results_bool_exp
  ): [toad_session_game_results!]!

  """An object relationship"""
  session: toad_sessions!
  session_id: uuid!
  started_at: timestamptz
}

"""
aggregated selection of "toad.session_games"
"""
type toad_session_games_aggregate {
  aggregate: toad_session_games_aggregate_fields
  nodes: [toad_session_games!]!
}

input toad_session_games_aggregate_bool_exp {
  count: toad_session_games_aggregate_bool_exp_count
}

input toad_session_games_aggregate_bool_exp_count {
  arguments: [toad_session_games_select_column!]
  distinct: Boolean
  filter: toad_session_games_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "toad.session_games"
"""
type toad_session_games_aggregate_fields {
  avg: toad_session_games_avg_fields
  count(columns: [toad_session_games_select_column!], distinct: Boolean): Int!
  max: toad_session_games_max_fields
  min: toad_session_games_min_fields
  stddev: toad_session_games_stddev_fields
  stddev_pop: toad_session_games_stddev_pop_fields
  stddev_samp: toad_session_games_stddev_samp_fields
  sum: toad_session_games_sum_fields
  var_pop: toad_session_games_var_pop_fields
  var_samp: toad_session_games_var_samp_fields
  variance: toad_session_games_variance_fields
}

"""
order by aggregate values of table "toad.session_games"
"""
input toad_session_games_aggregate_order_by {
  avg: toad_session_games_avg_order_by
  count: order_by
  max: toad_session_games_max_order_by
  min: toad_session_games_min_order_by
  stddev: toad_session_games_stddev_order_by
  stddev_pop: toad_session_games_stddev_pop_order_by
  stddev_samp: toad_session_games_stddev_samp_order_by
  sum: toad_session_games_sum_order_by
  var_pop: toad_session_games_var_pop_order_by
  var_samp: toad_session_games_var_samp_order_by
  variance: toad_session_games_variance_order_by
}

"""
input type for inserting array relation for remote table "toad.session_games"
"""
input toad_session_games_arr_rel_insert_input {
  data: [toad_session_games_insert_input!]!

  """upsert condition"""
  on_conflict: toad_session_games_on_conflict
}

"""aggregate avg on columns"""
type toad_session_games_avg_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by avg() on columns of table "toad.session_games"
"""
input toad_session_games_avg_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""
Boolean expression to filter rows from the table "toad.session_games". All fields are combined with a logical 'AND'.
"""
input toad_session_games_bool_exp {
  _and: [toad_session_games_bool_exp!]
  _not: toad_session_games_bool_exp
  _or: [toad_session_games_bool_exp!]
  duration: Int_comparison_exp
  game_id: uuid_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  points: Int_comparison_exp
  position: Int_comparison_exp
  results: toad_session_game_results_bool_exp
  session: toad_sessions_bool_exp
  session_id: uuid_comparison_exp
  started_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "toad.session_games"
"""
enum toad_session_games_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  session_games_pkey
}

"""
input type for inserting data into table "toad.session_games"
"""
input toad_session_games_insert_input {
  duration: Int
  game_id: uuid
  name: String
  points: Int
  position: Int
  results: toad_session_game_results_arr_rel_insert_input
  session: toad_sessions_obj_rel_insert_input
  session_id: uuid
  started_at: timestamptz
}

"""aggregate max on columns"""
type toad_session_games_max_fields {
  duration: Int
  game_id: uuid
  id: Int
  name: String
  points: Int
  position: Int
  session_id: uuid
  started_at: timestamptz
}

"""
order by max() on columns of table "toad.session_games"
"""
input toad_session_games_max_order_by {
  duration: order_by
  game_id: order_by
  id: order_by
  name: order_by
  points: order_by
  position: order_by
  session_id: order_by
  started_at: order_by
}

"""aggregate min on columns"""
type toad_session_games_min_fields {
  duration: Int
  game_id: uuid
  id: Int
  name: String
  points: Int
  position: Int
  session_id: uuid
  started_at: timestamptz
}

"""
order by min() on columns of table "toad.session_games"
"""
input toad_session_games_min_order_by {
  duration: order_by
  game_id: order_by
  id: order_by
  name: order_by
  points: order_by
  position: order_by
  session_id: order_by
  started_at: order_by
}

"""
response of any mutation on the table "toad.session_games"
"""
type toad_session_games_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [toad_session_games!]!
}

"""
input type for inserting object relation for remote table "toad.session_games"
"""
input toad_session_games_obj_rel_insert_input {
  data: toad_session_games_insert_input!

  """upsert condition"""
  on_conflict: toad_session_games_on_conflict
}

"""
on_conflict condition type for table "toad.session_games"
"""
input toad_session_games_on_conflict {
  constraint: toad_session_games_constraint!
  update_columns: [toad_session_games_update_column!]! = []
  where: toad_session_games_bool_exp
}

"""Ordering options when selecting data from "toad.session_games"."""
input toad_session_games_order_by {
  duration: order_by
  game_id: order_by
  id: order_by
  name: order_by
  points: order_by
  position: order_by
  results_aggregate: toad_session_game_results_aggregate_order_by
  session: toad_sessions_order_by
  session_id: order_by
  started_at: order_by
}

"""primary key columns input for table: toad.session_games"""
input toad_session_games_pk_columns_input {
  id: Int!
}

"""
select columns of table "toad.session_games"
"""
enum toad_session_games_select_column {
  """column name"""
  duration

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  points

  """column name"""
  position

  """column name"""
  session_id

  """column name"""
  started_at
}

"""
input type for updating data in table "toad.session_games"
"""
input toad_session_games_set_input {
  started_at: timestamptz
}

"""aggregate stddev on columns"""
type toad_session_games_stddev_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by stddev() on columns of table "toad.session_games"
"""
input toad_session_games_stddev_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""aggregate stddev_pop on columns"""
type toad_session_games_stddev_pop_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by stddev_pop() on columns of table "toad.session_games"
"""
input toad_session_games_stddev_pop_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""aggregate stddev_samp on columns"""
type toad_session_games_stddev_samp_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by stddev_samp() on columns of table "toad.session_games"
"""
input toad_session_games_stddev_samp_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""
Streaming cursor of the table "toad_session_games"
"""
input toad_session_games_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_session_games_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_session_games_stream_cursor_value_input {
  duration: Int
  game_id: uuid
  id: Int
  name: String
  points: Int
  position: Int
  session_id: uuid
  started_at: timestamptz
}

"""aggregate sum on columns"""
type toad_session_games_sum_fields {
  duration: Int
  id: Int
  points: Int
  position: Int
}

"""
order by sum() on columns of table "toad.session_games"
"""
input toad_session_games_sum_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""
update columns of table "toad.session_games"
"""
enum toad_session_games_update_column {
  """column name"""
  started_at
}

input toad_session_games_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: toad_session_games_set_input
  where: toad_session_games_bool_exp!
}

"""aggregate var_pop on columns"""
type toad_session_games_var_pop_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by var_pop() on columns of table "toad.session_games"
"""
input toad_session_games_var_pop_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""aggregate var_samp on columns"""
type toad_session_games_var_samp_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by var_samp() on columns of table "toad.session_games"
"""
input toad_session_games_var_samp_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""aggregate variance on columns"""
type toad_session_games_variance_fields {
  duration: Float
  id: Float
  points: Float
  position: Float
}

"""
order by variance() on columns of table "toad.session_games"
"""
input toad_session_games_variance_order_by {
  duration: order_by
  id: order_by
  points: order_by
  position: order_by
}

"""
columns and relationships of "toad.sessions"
"""
type toad_sessions {
  allowed_attempts: Int!
  attempts(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  campaign: toad_campaigns!
  campaign_id: uuid!

  """An object relationship"""
  candidate: user
  candidate_id: Int
  created_at: timestamptz!

  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): [toad_session_games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_session_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_session_games_order_by!]

    """filter the rows returned"""
    where: toad_session_games_bool_exp
  ): toad_session_games_aggregate!
  id: uuid!
  instructions: String
  started_at: timestamptz
}

"""
aggregated selection of "toad.sessions"
"""
type toad_sessions_aggregate {
  aggregate: toad_sessions_aggregate_fields
  nodes: [toad_sessions!]!
}

input toad_sessions_aggregate_bool_exp {
  count: toad_sessions_aggregate_bool_exp_count
}

input toad_sessions_aggregate_bool_exp_count {
  arguments: [toad_sessions_select_column!]
  distinct: Boolean
  filter: toad_sessions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "toad.sessions"
"""
type toad_sessions_aggregate_fields {
  avg: toad_sessions_avg_fields
  count(columns: [toad_sessions_select_column!], distinct: Boolean): Int!
  max: toad_sessions_max_fields
  min: toad_sessions_min_fields
  stddev: toad_sessions_stddev_fields
  stddev_pop: toad_sessions_stddev_pop_fields
  stddev_samp: toad_sessions_stddev_samp_fields
  sum: toad_sessions_sum_fields
  var_pop: toad_sessions_var_pop_fields
  var_samp: toad_sessions_var_samp_fields
  variance: toad_sessions_variance_fields
}

"""
order by aggregate values of table "toad.sessions"
"""
input toad_sessions_aggregate_order_by {
  avg: toad_sessions_avg_order_by
  count: order_by
  max: toad_sessions_max_order_by
  min: toad_sessions_min_order_by
  stddev: toad_sessions_stddev_order_by
  stddev_pop: toad_sessions_stddev_pop_order_by
  stddev_samp: toad_sessions_stddev_samp_order_by
  sum: toad_sessions_sum_order_by
  var_pop: toad_sessions_var_pop_order_by
  var_samp: toad_sessions_var_samp_order_by
  variance: toad_sessions_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input toad_sessions_append_input {
  attempts: jsonb
}

"""aggregate avg on columns"""
type toad_sessions_avg_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by avg() on columns of table "toad.sessions"
"""
input toad_sessions_avg_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""
Boolean expression to filter rows from the table "toad.sessions". All fields are combined with a logical 'AND'.
"""
input toad_sessions_bool_exp {
  _and: [toad_sessions_bool_exp!]
  _not: toad_sessions_bool_exp
  _or: [toad_sessions_bool_exp!]
  allowed_attempts: Int_comparison_exp
  attempts: jsonb_comparison_exp
  campaign: toad_campaigns_bool_exp
  campaign_id: uuid_comparison_exp
  candidate: user_bool_exp
  candidate_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  games: toad_session_games_bool_exp
  games_aggregate: toad_session_games_aggregate_bool_exp
  id: uuid_comparison_exp
  instructions: String_comparison_exp
  started_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "toad.sessions"
"""
enum toad_sessions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  sessions_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input toad_sessions_delete_at_path_input {
  attempts: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input toad_sessions_delete_elem_input {
  attempts: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input toad_sessions_delete_key_input {
  attempts: String
}

"""
input type for incrementing numeric columns in table "toad.sessions"
"""
input toad_sessions_inc_input {
  allowed_attempts: Int
  final_score: numeric
}

"""
input type for inserting data into table "toad.sessions"
"""
input toad_sessions_insert_input {
  allowed_attempts: Int
  attempts: jsonb
  campaign_id: uuid
  candidate_id: Int
  games: toad_session_games_arr_rel_insert_input
  instructions: String
  started_at: timestamptz
}

"""aggregate max on columns"""
type toad_sessions_max_fields {
  allowed_attempts: Int
  campaign_id: uuid
  candidate_id: Int
  created_at: timestamptz
  id: uuid
  instructions: String
  started_at: timestamptz
}

"""
order by max() on columns of table "toad.sessions"
"""
input toad_sessions_max_order_by {
  allowed_attempts: order_by
  campaign_id: order_by
  candidate_id: order_by
  created_at: order_by
  id: order_by
  instructions: order_by
  started_at: order_by
}

"""aggregate min on columns"""
type toad_sessions_min_fields {
  allowed_attempts: Int
  campaign_id: uuid
  candidate_id: Int
  created_at: timestamptz
  id: uuid
  instructions: String
  started_at: timestamptz
}

"""
order by min() on columns of table "toad.sessions"
"""
input toad_sessions_min_order_by {
  allowed_attempts: order_by
  campaign_id: order_by
  candidate_id: order_by
  created_at: order_by
  id: order_by
  instructions: order_by
  started_at: order_by
}

"""
response of any mutation on the table "toad.sessions"
"""
type toad_sessions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [toad_sessions!]!
}

"""
input type for inserting object relation for remote table "toad.sessions"
"""
input toad_sessions_obj_rel_insert_input {
  data: toad_sessions_insert_input!

  """upsert condition"""
  on_conflict: toad_sessions_on_conflict
}

"""
on_conflict condition type for table "toad.sessions"
"""
input toad_sessions_on_conflict {
  constraint: toad_sessions_constraint!
  update_columns: [toad_sessions_update_column!]! = []
  where: toad_sessions_bool_exp
}

"""Ordering options when selecting data from "toad.sessions"."""
input toad_sessions_order_by {
  allowed_attempts: order_by
  attempts: order_by
  campaign: toad_campaigns_order_by
  campaign_id: order_by
  candidate: user_order_by
  candidate_id: order_by
  created_at: order_by
  games_aggregate: toad_session_games_aggregate_order_by
  id: order_by
  instructions: order_by
  started_at: order_by
}

"""primary key columns input for table: toad.sessions"""
input toad_sessions_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input toad_sessions_prepend_input {
  attempts: jsonb
}

"""
select columns of table "toad.sessions"
"""
enum toad_sessions_select_column {
  """column name"""
  allowed_attempts

  """column name"""
  attempts

  """column name"""
  campaign_id

  """column name"""
  candidate_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  instructions

  """column name"""
  started_at
}

"""
input type for updating data in table "toad.sessions"
"""
input toad_sessions_set_input {
  allowed_attempts: Int
  attempts: jsonb
  final_score: numeric
  started_at: timestamptz
}

"""aggregate stddev on columns"""
type toad_sessions_stddev_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by stddev() on columns of table "toad.sessions"
"""
input toad_sessions_stddev_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""aggregate stddev_pop on columns"""
type toad_sessions_stddev_pop_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by stddev_pop() on columns of table "toad.sessions"
"""
input toad_sessions_stddev_pop_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""aggregate stddev_samp on columns"""
type toad_sessions_stddev_samp_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by stddev_samp() on columns of table "toad.sessions"
"""
input toad_sessions_stddev_samp_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""
Streaming cursor of the table "toad_sessions"
"""
input toad_sessions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: toad_sessions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input toad_sessions_stream_cursor_value_input {
  allowed_attempts: Int
  attempts: jsonb
  campaign_id: uuid
  candidate_id: Int
  created_at: timestamptz
  id: uuid
  instructions: String
  started_at: timestamptz
}

"""aggregate sum on columns"""
type toad_sessions_sum_fields {
  allowed_attempts: Int
  candidate_id: Int
}

"""
order by sum() on columns of table "toad.sessions"
"""
input toad_sessions_sum_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""
Boolean expression to filter rows from the table "toad.sessions_to_send". All fields are combined with a logical 'AND'.
"""
input toad_sessions_to_send_bool_exp {
  _and: [toad_sessions_to_send_bool_exp!]
  _not: toad_sessions_to_send_bool_exp
  _or: [toad_sessions_to_send_bool_exp!]
}

"""
unique or primary key constraints on table "toad.sessions_to_send"
"""
enum toad_sessions_to_send_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  sessions_to_send_pkey

  """
  unique or primary key constraint on columns "session_id"
  """
  sessions_to_send_session_id_key
}

"""
input type for inserting data into table "toad.sessions_to_send"
"""
input toad_sessions_to_send_insert_input {
  ended_at: timestamptz
  id: Int
  session: toad_sessions_obj_rel_insert_input
  session_id: uuid
}

"""
response of any mutation on the table "toad.sessions_to_send"
"""
type toad_sessions_to_send_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
}

"""
on_conflict condition type for table "toad.sessions_to_send"
"""
input toad_sessions_to_send_on_conflict {
  constraint: toad_sessions_to_send_constraint!
  update_columns: [toad_sessions_to_send_update_column!]! = []
  where: toad_sessions_to_send_bool_exp
}

"""
placeholder for update columns of table "toad.sessions_to_send" (current role has no relevant permissions)
"""
enum toad_sessions_to_send_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

input toad_sessions_to_send_updates {
  where: toad_sessions_to_send_bool_exp!
}

"""
update columns of table "toad.sessions"
"""
enum toad_sessions_update_column {
  """column name"""
  allowed_attempts

  """column name"""
  attempts

  """column name"""
  final_score

  """column name"""
  started_at
}

input toad_sessions_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: toad_sessions_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: toad_sessions_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: toad_sessions_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: toad_sessions_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: toad_sessions_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: toad_sessions_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: toad_sessions_set_input
  where: toad_sessions_bool_exp!
}

"""aggregate var_pop on columns"""
type toad_sessions_var_pop_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by var_pop() on columns of table "toad.sessions"
"""
input toad_sessions_var_pop_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""aggregate var_samp on columns"""
type toad_sessions_var_samp_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by var_samp() on columns of table "toad.sessions"
"""
input toad_sessions_var_samp_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""aggregate variance on columns"""
type toad_sessions_variance_fields {
  allowed_attempts: Float
  candidate_id: Float
}

"""
order by variance() on columns of table "toad.sessions"
"""
input toad_sessions_variance_order_by {
  allowed_attempts: order_by
  candidate_id: order_by
}

"""
columns and relationships of "transaction"
"""
type transaction {
  amount: numeric!
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!
  campus: String
  createdAt: timestamptz!

  """An object relationship"""
  event: event
  eventId: Int
  id: Int!

  """An object relationship"""
  object: object
  objectId: Int!
  path: String!

  """An object relationship"""
  transaction_type: transaction_type!
  type: String!

  """An object relationship"""
  user: user!
  userId: Int!
  userLogin: String
}

"""
aggregated selection of "transaction"
"""
type transaction_aggregate {
  aggregate: transaction_aggregate_fields
  nodes: [transaction!]!
}

input transaction_aggregate_bool_exp {
  count: transaction_aggregate_bool_exp_count
}

input transaction_aggregate_bool_exp_count {
  arguments: [transaction_select_column!]
  distinct: Boolean
  filter: transaction_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "transaction"
"""
type transaction_aggregate_fields {
  avg: transaction_avg_fields
  count(columns: [transaction_select_column!], distinct: Boolean): Int!
  max: transaction_max_fields
  min: transaction_min_fields
  stddev: transaction_stddev_fields
  stddev_pop: transaction_stddev_pop_fields
  stddev_samp: transaction_stddev_samp_fields
  sum: transaction_sum_fields
  var_pop: transaction_var_pop_fields
  var_samp: transaction_var_samp_fields
  variance: transaction_variance_fields
}

"""
order by aggregate values of table "transaction"
"""
input transaction_aggregate_order_by {
  avg: transaction_avg_order_by
  count: order_by
  max: transaction_max_order_by
  min: transaction_min_order_by
  stddev: transaction_stddev_order_by
  stddev_pop: transaction_stddev_pop_order_by
  stddev_samp: transaction_stddev_samp_order_by
  sum: transaction_sum_order_by
  var_pop: transaction_var_pop_order_by
  var_samp: transaction_var_samp_order_by
  variance: transaction_variance_order_by
}

"""aggregate avg on columns"""
type transaction_avg_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by avg() on columns of table "transaction"
"""
input transaction_avg_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "transaction". All fields are combined with a logical 'AND'.
"""
input transaction_bool_exp {
  _and: [transaction_bool_exp!]
  _not: transaction_bool_exp
  _or: [transaction_bool_exp!]
  amount: numeric_comparison_exp
  attrs: jsonb_comparison_exp
  campus: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  event: event_bool_exp
  eventId: Int_comparison_exp
  id: Int_comparison_exp
  object: object_bool_exp
  objectId: Int_comparison_exp
  path: String_comparison_exp
  transaction_type: transaction_type_bool_exp
  type: String_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
  userLogin: String_comparison_exp
}

"""aggregate max on columns"""
type transaction_max_fields {
  amount: numeric
  campus: String
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  type: String
  userId: Int
}

"""
order by max() on columns of table "transaction"
"""
input transaction_max_order_by {
  amount: order_by
  campus: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  type: order_by
  userId: order_by
}

"""aggregate min on columns"""
type transaction_min_fields {
  amount: numeric
  campus: String
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  type: String
  userId: Int
}

"""
order by min() on columns of table "transaction"
"""
input transaction_min_order_by {
  amount: order_by
  campus: order_by
  createdAt: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  path: order_by
  type: order_by
  userId: order_by
}

"""Ordering options when selecting data from "transaction"."""
input transaction_order_by {
  amount: order_by
  attrs: order_by
  campus: order_by
  createdAt: order_by
  event: event_order_by
  eventId: order_by
  id: order_by
  object: object_order_by
  objectId: order_by
  path: order_by
  transaction_type: transaction_type_order_by
  type: order_by
  user: user_order_by
  userId: order_by
  userLogin: order_by
}

"""
select columns of table "transaction"
"""
enum transaction_select_column {
  """column name"""
  amount

  """column name"""
  attrs

  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  eventId

  """column name"""
  id

  """column name"""
  objectId

  """column name"""
  path

  """column name"""
  type

  """column name"""
  userId
}

"""aggregate stddev on columns"""
type transaction_stddev_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev() on columns of table "transaction"
"""
input transaction_stddev_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type transaction_stddev_pop_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "transaction"
"""
input transaction_stddev_pop_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type transaction_stddev_samp_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "transaction"
"""
input transaction_stddev_samp_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "transaction"
"""
input transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transaction_stream_cursor_value_input {
  amount: numeric
  attrs: jsonb
  campus: String
  createdAt: timestamptz
  eventId: Int
  id: Int
  objectId: Int
  path: String
  type: String
  userId: Int
}

"""aggregate sum on columns"""
type transaction_sum_fields {
  amount: numeric
  eventId: Int
  id: Int
  objectId: Int
  userId: Int
}

"""
order by sum() on columns of table "transaction"
"""
input transaction_sum_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
columns and relationships of "transaction_type"
"""
type transaction_type {
  """An array relationship"""
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): [transaction!]!

  """An aggregate relationship"""
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): transaction_aggregate!
  type: String!
}

"""
aggregated selection of "transaction_type"
"""
type transaction_type_aggregate {
  aggregate: transaction_type_aggregate_fields
  nodes: [transaction_type!]!
}

"""
aggregate fields of "transaction_type"
"""
type transaction_type_aggregate_fields {
  count(columns: [transaction_type_select_column!], distinct: Boolean): Int!
  max: transaction_type_max_fields
  min: transaction_type_min_fields
}

"""
Boolean expression to filter rows from the table "transaction_type". All fields are combined with a logical 'AND'.
"""
input transaction_type_bool_exp {
  _and: [transaction_type_bool_exp!]
  _not: transaction_type_bool_exp
  _or: [transaction_type_bool_exp!]
  transactions: transaction_bool_exp
  transactions_aggregate: transaction_aggregate_bool_exp
  type: String_comparison_exp
}

"""aggregate max on columns"""
type transaction_type_max_fields {
  type: String
}

"""aggregate min on columns"""
type transaction_type_min_fields {
  type: String
}

"""Ordering options when selecting data from "transaction_type"."""
input transaction_type_order_by {
  transactions_aggregate: transaction_aggregate_order_by
  type: order_by
}

"""
select columns of table "transaction_type"
"""
enum transaction_type_select_column {
  """column name"""
  type
}

"""
Streaming cursor of the table "transaction_type"
"""
input transaction_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transaction_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transaction_type_stream_cursor_value_input {
  type: String
}

"""aggregate var_pop on columns"""
type transaction_var_pop_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "transaction"
"""
input transaction_var_pop_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type transaction_var_samp_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "transaction"
"""
input transaction_var_samp_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type transaction_variance_fields {
  amount: Float
  eventId: Float
  id: Float
  objectId: Float
  userId: Float
}

"""
order by variance() on columns of table "transaction"
"""
input transaction_variance_order_by {
  amount: order_by
  eventId: order_by
  id: order_by
  objectId: order_by
  userId: order_by
}

"""
columns and relationships of "user"
"""
type user {
  attrs(
    """JSON select path"""
    path: String
  ): jsonb!
  auditRatio: float8

  """An array relationship"""
  audits(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): [audit!]!

  """An aggregate relationship"""
  audits_aggregate(
    """distinct select on columns"""
    distinct_on: [audit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [audit_order_by!]

    """filter the rows returned"""
    where: audit_bool_exp
  ): audit_aggregate!
  campus: String
  createdAt: timestamptz!
  discordId: String
  discordLogin: String
  email: String

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [event_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_order_by!]

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!
  firstName: String
  githubId: Int

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): [group_user!]!

  """An array relationship"""
  groupsByCaptainid(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): [group!]!

  """An aggregate relationship"""
  groupsByCaptainid_aggregate(
    """distinct select on columns"""
    distinct_on: [group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_order_by!]

    """filter the rows returned"""
    where: group_bool_exp
  ): group_aggregate!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [group_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [group_user_order_by!]

    """filter the rows returned"""
    where: group_user_bool_exp
  ): group_user_aggregate!
  id: Int!

  """An array relationship"""
  labels(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """An aggregate relationship"""
  labels_aggregate(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): label_user_aggregate!
  lastName: String
  login: String!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregate relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """An array relationship"""
  objects(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): [object!]!

  """An aggregate relationship"""
  objects_aggregate(
    """distinct select on columns"""
    distinct_on: [object_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_order_by!]

    """filter the rows returned"""
    where: object_bool_exp
  ): object_aggregate!
  profile(
    """JSON select path"""
    path: String
  ): jsonb!

  """An array relationship"""
  progresses(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): [progress!]!

  """An array relationship"""
  progressesByPath(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): [progress_by_path_view!]!

  """An aggregate relationship"""
  progressesByPath_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_by_path_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_by_path_view_order_by!]

    """filter the rows returned"""
    where: progress_by_path_view_bool_exp
  ): progress_by_path_view_aggregate!

  """An aggregate relationship"""
  progresses_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_order_by!]

    """filter the rows returned"""
    where: progress_bool_exp
  ): progress_aggregate!

  """An object relationship"""
  public: user_public_view

  """An array relationship"""
  records(
    """distinct select on columns"""
    distinct_on: [record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [record_order_by!]

    """filter the rows returned"""
    where: record_bool_exp
  ): [record!]!

  """An array relationship"""
  recordsByAuthorid(
    """distinct select on columns"""
    distinct_on: [record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [record_order_by!]

    """filter the rows returned"""
    where: record_bool_exp
  ): [record!]!

  """An array relationship"""
  registrations(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): [registration_user!]!

  """An aggregate relationship"""
  registrations_aggregate(
    """distinct select on columns"""
    distinct_on: [registration_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registration_user_order_by!]

    """filter the rows returned"""
    where: registration_user_bool_exp
  ): registration_user_aggregate!

  """An array relationship"""
  results(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): [result!]!

  """An aggregate relationship"""
  results_aggregate(
    """distinct select on columns"""
    distinct_on: [result_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [result_order_by!]

    """filter the rows returned"""
    where: result_bool_exp
  ): result_aggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): [user_roles_view!]!

  """An aggregate relationship"""
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): user_roles_view_aggregate!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): [toad_sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [toad_sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [toad_sessions_order_by!]

    """filter the rows returned"""
    where: toad_sessions_bool_exp
  ): toad_sessions_aggregate!
  totalDown: numeric
  totalUp: numeric

  """An array relationship"""
  transactions(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): [transaction!]!

  """An aggregate relationship"""
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transaction_order_by!]

    """filter the rows returned"""
    where: transaction_bool_exp
  ): transaction_aggregate!
  updatedAt: timestamptz!

  """An array relationship"""
  user_roles(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): [user_role!]!

  """An aggregate relationship"""
  user_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_role_order_by!]

    """filter the rows returned"""
    where: user_role_bool_exp
  ): user_role_aggregate!

  """An array relationship"""
  xps(
    """distinct select on columns"""
    distinct_on: [xp_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [xp_view_order_by!]

    """filter the rows returned"""
    where: xp_view_bool_exp
  ): [xp_view!]!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input user_append_input {
  attrs: jsonb
  profile: jsonb
}

"""aggregate avg on columns"""
type user_avg_fields {
  githubId: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  attrs: jsonb_comparison_exp
  auditRatio: float8_comparison_exp
  audits: audit_bool_exp
  audits_aggregate: audit_aggregate_bool_exp
  campus: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  discordId: String_comparison_exp
  discordLogin: String_comparison_exp
  email: String_comparison_exp
  events: event_user_bool_exp
  firstName: String_comparison_exp
  githubId: Int_comparison_exp
  groups: group_user_bool_exp
  groupsByCaptainid: group_bool_exp
  groupsByCaptainid_aggregate: group_aggregate_bool_exp
  groups_aggregate: group_user_aggregate_bool_exp
  id: Int_comparison_exp
  labels: label_user_bool_exp
  labels_aggregate: label_user_aggregate_bool_exp
  lastName: String_comparison_exp
  login: String_comparison_exp
  matches: match_bool_exp
  matches_aggregate: match_aggregate_bool_exp
  objects: object_bool_exp
  objects_aggregate: object_aggregate_bool_exp
  profile: jsonb_comparison_exp
  progresses: progress_bool_exp
  progressesByPath: progress_by_path_view_bool_exp
  progressesByPath_aggregate: progress_by_path_view_aggregate_bool_exp
  progresses_aggregate: progress_aggregate_bool_exp
  public: user_public_view_bool_exp
  records: record_bool_exp
  recordsByAuthorid: record_bool_exp
  registrations: registration_user_bool_exp
  registrations_aggregate: registration_user_aggregate_bool_exp
  results: result_bool_exp
  results_aggregate: result_aggregate_bool_exp
  roles: user_roles_view_bool_exp
  roles_aggregate: user_roles_view_aggregate_bool_exp
  sessions: toad_sessions_bool_exp
  sessions_aggregate: toad_sessions_aggregate_bool_exp
  totalDown: numeric_comparison_exp
  totalUp: numeric_comparison_exp
  transactions: transaction_bool_exp
  transactions_aggregate: transaction_aggregate_bool_exp
  updatedAt: timestamptz_comparison_exp
  user_roles: user_role_bool_exp
  user_roles_aggregate: user_role_aggregate_bool_exp
  xps: xp_view_bool_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input user_delete_at_path_input {
  attrs: [String!]
  profile: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input user_delete_elem_input {
  attrs: Int
  profile: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input user_delete_key_input {
  attrs: String
  profile: String
}

"""aggregate max on columns"""
type user_max_fields {
  campus: String
  createdAt: timestamptz
  discordId: String
  discordLogin: String
  email: String
  firstName: String
  githubId: Int
  id: Int
  lastName: String
  login: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type user_min_fields {
  campus: String
  createdAt: timestamptz
  discordId: String
  discordLogin: String
  email: String
  firstName: String
  githubId: Int
  id: Int
  lastName: String
  login: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  attrs: order_by
  auditRatio: order_by
  audits_aggregate: audit_aggregate_order_by
  campus: order_by
  createdAt: order_by
  discordId: order_by
  discordLogin: order_by
  email: order_by
  events_aggregate: event_user_aggregate_order_by
  firstName: order_by
  githubId: order_by
  groupsByCaptainid_aggregate: group_aggregate_order_by
  groups_aggregate: group_user_aggregate_order_by
  id: order_by
  labels_aggregate: label_user_aggregate_order_by
  lastName: order_by
  login: order_by
  matches_aggregate: match_aggregate_order_by
  objects_aggregate: object_aggregate_order_by
  profile: order_by
  progressesByPath_aggregate: progress_by_path_view_aggregate_order_by
  progresses_aggregate: progress_aggregate_order_by
  public: user_public_view_order_by
  recordsByAuthorid_aggregate: record_aggregate_order_by
  records_aggregate: record_aggregate_order_by
  registrations_aggregate: registration_user_aggregate_order_by
  results_aggregate: result_aggregate_order_by
  roles_aggregate: user_roles_view_aggregate_order_by
  sessions_aggregate: toad_sessions_aggregate_order_by
  totalDown: order_by
  totalUp: order_by
  transactions_aggregate: transaction_aggregate_order_by
  updatedAt: order_by
  user_roles_aggregate: user_role_aggregate_order_by
  xps_aggregate: xp_view_aggregate_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input user_prepend_input {
  attrs: jsonb
  profile: jsonb
}

"""
columns and relationships of "user_public_view"
"""
type user_public_view {
  campus: String
  discordId: String

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [event_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_user_order_by!]

    """filter the rows returned"""
    where: event_user_bool_exp
  ): [event_user!]!
  githubId: Int
  id: Int
  isAvailable: Boolean

  """An array relationship"""
  labels(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): [label_user!]!

  """An aggregate relationship"""
  labels_aggregate(
    """distinct select on columns"""
    distinct_on: [label_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [label_user_order_by!]

    """filter the rows returned"""
    where: label_user_bool_exp
  ): label_user_aggregate!
  login: String

  """An object relationship"""
  private: user
  profile(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): [user_roles_view!]!

  """An aggregate relationship"""
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_roles_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_roles_view_order_by!]

    """filter the rows returned"""
    where: user_roles_view_bool_exp
  ): user_roles_view_aggregate!
}

"""
Boolean expression to filter rows from the table "user_public_view". All fields are combined with a logical 'AND'.
"""
input user_public_view_bool_exp {
  _and: [user_public_view_bool_exp!]
  _not: user_public_view_bool_exp
  _or: [user_public_view_bool_exp!]
  campus: String_comparison_exp
  discordId: String_comparison_exp
  events: event_user_bool_exp
  githubId: Int_comparison_exp
  id: Int_comparison_exp
  isAvailable: Boolean_comparison_exp
  labels: label_user_bool_exp
  labels_aggregate: label_user_aggregate_bool_exp
  login: String_comparison_exp
  private: user_bool_exp
  profile: jsonb_comparison_exp
  roles: user_roles_view_bool_exp
  roles_aggregate: user_roles_view_aggregate_bool_exp
}

"""Ordering options when selecting data from "user_public_view"."""
input user_public_view_order_by {
  campus: order_by
  discordId: order_by
  events_aggregate: event_user_aggregate_order_by
  githubId: order_by
  id: order_by
  isAvailable: order_by
  labels_aggregate: label_user_aggregate_order_by
  login: order_by
  private: user_order_by
  profile: order_by
  roles_aggregate: user_roles_view_aggregate_order_by
}

"""
select columns of table "user_public_view"
"""
enum user_public_view_select_column {
  """column name"""
  campus

  """column name"""
  discordId

  """column name"""
  githubId

  """column name"""
  id

  """column name"""
  isAvailable

  """column name"""
  login

  """column name"""
  profile
}

"""
Streaming cursor of the table "user_public_view"
"""
input user_public_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_public_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_public_view_stream_cursor_value_input {
  campus: String
  discordId: String
  githubId: Int
  id: Int
  isAvailable: Boolean
  login: String
  profile: jsonb
}

"""
columns and relationships of "user_role"
"""
type user_role {
  id: Int!

  """An object relationship"""
  role: role!
  roleId: Int!

  """An object relationship"""
  user: user!
  userId: Int!
}

"""
aggregated selection of "user_role"
"""
type user_role_aggregate {
  aggregate: user_role_aggregate_fields
  nodes: [user_role!]!
}

input user_role_aggregate_bool_exp {
  count: user_role_aggregate_bool_exp_count
}

input user_role_aggregate_bool_exp_count {
  arguments: [user_role_select_column!]
  distinct: Boolean
  filter: user_role_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_role"
"""
type user_role_aggregate_fields {
  avg: user_role_avg_fields
  count(columns: [user_role_select_column!], distinct: Boolean): Int!
  max: user_role_max_fields
  min: user_role_min_fields
  stddev: user_role_stddev_fields
  stddev_pop: user_role_stddev_pop_fields
  stddev_samp: user_role_stddev_samp_fields
  sum: user_role_sum_fields
  var_pop: user_role_var_pop_fields
  var_samp: user_role_var_samp_fields
  variance: user_role_variance_fields
}

"""
order by aggregate values of table "user_role"
"""
input user_role_aggregate_order_by {
  avg: user_role_avg_order_by
  count: order_by
  max: user_role_max_order_by
  min: user_role_min_order_by
  stddev: user_role_stddev_order_by
  stddev_pop: user_role_stddev_pop_order_by
  stddev_samp: user_role_stddev_samp_order_by
  sum: user_role_sum_order_by
  var_pop: user_role_var_pop_order_by
  var_samp: user_role_var_samp_order_by
  variance: user_role_variance_order_by
}

"""aggregate avg on columns"""
type user_role_avg_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by avg() on columns of table "user_role"
"""
input user_role_avg_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "user_role". All fields are combined with a logical 'AND'.
"""
input user_role_bool_exp {
  _and: [user_role_bool_exp!]
  _not: user_role_bool_exp
  _or: [user_role_bool_exp!]
  id: Int_comparison_exp
  role: role_bool_exp
  roleId: Int_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
}

"""aggregate max on columns"""
type user_role_max_fields {
  id: Int
  roleId: Int
  userId: Int
}

"""
order by max() on columns of table "user_role"
"""
input user_role_max_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type user_role_min_fields {
  id: Int
  roleId: Int
  userId: Int
}

"""
order by min() on columns of table "user_role"
"""
input user_role_min_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""Ordering options when selecting data from "user_role"."""
input user_role_order_by {
  id: order_by
  role: role_order_by
  roleId: order_by
  user: user_order_by
  userId: order_by
}

"""
select columns of table "user_role"
"""
enum user_role_select_column {
  """column name"""
  id

  """column name"""
  roleId

  """column name"""
  userId
}

"""aggregate stddev on columns"""
type user_role_stddev_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by stddev() on columns of table "user_role"
"""
input user_role_stddev_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type user_role_stddev_pop_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "user_role"
"""
input user_role_stddev_pop_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type user_role_stddev_samp_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "user_role"
"""
input user_role_stddev_samp_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "user_role"
"""
input user_role_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_role_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_role_stream_cursor_value_input {
  id: Int
  roleId: Int
  userId: Int
}

"""aggregate sum on columns"""
type user_role_sum_fields {
  id: Int
  roleId: Int
  userId: Int
}

"""
order by sum() on columns of table "user_role"
"""
input user_role_sum_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type user_role_var_pop_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "user_role"
"""
input user_role_var_pop_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type user_role_var_samp_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "user_role"
"""
input user_role_var_samp_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type user_role_variance_fields {
  id: Float
  roleId: Float
  userId: Float
}

"""
order by variance() on columns of table "user_role"
"""
input user_role_variance_order_by {
  id: order_by
  roleId: order_by
  userId: order_by
}

"""
columns and relationships of "user_roles_view"
"""
type user_roles_view {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz

  """An object relationship"""
  user: user
  userId: Int
}

"""
aggregated selection of "user_roles_view"
"""
type user_roles_view_aggregate {
  aggregate: user_roles_view_aggregate_fields
  nodes: [user_roles_view!]!
}

input user_roles_view_aggregate_bool_exp {
  count: user_roles_view_aggregate_bool_exp_count
}

input user_roles_view_aggregate_bool_exp_count {
  arguments: [user_roles_view_select_column!]
  distinct: Boolean
  filter: user_roles_view_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_roles_view"
"""
type user_roles_view_aggregate_fields {
  avg: user_roles_view_avg_fields
  count(columns: [user_roles_view_select_column!], distinct: Boolean): Int!
  max: user_roles_view_max_fields
  min: user_roles_view_min_fields
  stddev: user_roles_view_stddev_fields
  stddev_pop: user_roles_view_stddev_pop_fields
  stddev_samp: user_roles_view_stddev_samp_fields
  sum: user_roles_view_sum_fields
  var_pop: user_roles_view_var_pop_fields
  var_samp: user_roles_view_var_samp_fields
  variance: user_roles_view_variance_fields
}

"""
order by aggregate values of table "user_roles_view"
"""
input user_roles_view_aggregate_order_by {
  avg: user_roles_view_avg_order_by
  count: order_by
  max: user_roles_view_max_order_by
  min: user_roles_view_min_order_by
  stddev: user_roles_view_stddev_order_by
  stddev_pop: user_roles_view_stddev_pop_order_by
  stddev_samp: user_roles_view_stddev_samp_order_by
  sum: user_roles_view_sum_order_by
  var_pop: user_roles_view_var_pop_order_by
  var_samp: user_roles_view_var_samp_order_by
  variance: user_roles_view_variance_order_by
}

"""aggregate avg on columns"""
type user_roles_view_avg_fields {
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "user_roles_view"
"""
input user_roles_view_avg_order_by {
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "user_roles_view". All fields are combined with a logical 'AND'.
"""
input user_roles_view_bool_exp {
  _and: [user_roles_view_bool_exp!]
  _not: user_roles_view_bool_exp
  _or: [user_roles_view_bool_exp!]
  createdAt: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: user_bool_exp
  userId: Int_comparison_exp
}

"""aggregate max on columns"""
type user_roles_view_max_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by max() on columns of table "user_roles_view"
"""
input user_roles_view_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type user_roles_view_min_fields {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by min() on columns of table "user_roles_view"
"""
input user_roles_view_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updatedAt: order_by
  userId: order_by
}

"""Ordering options when selecting data from "user_roles_view"."""
input user_roles_view_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updatedAt: order_by
  user: user_order_by
  userId: order_by
}

"""
select columns of table "user_roles_view"
"""
enum user_roles_view_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""aggregate stddev on columns"""
type user_roles_view_stddev_fields {
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "user_roles_view"
"""
input user_roles_view_stddev_order_by {
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type user_roles_view_stddev_pop_fields {
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "user_roles_view"
"""
input user_roles_view_stddev_pop_order_by {
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type user_roles_view_stddev_samp_fields {
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "user_roles_view"
"""
input user_roles_view_stddev_samp_order_by {
  id: order_by
  userId: order_by
}

"""
Streaming cursor of the table "user_roles_view"
"""
input user_roles_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_roles_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_roles_view_stream_cursor_value_input {
  createdAt: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updatedAt: timestamptz
  userId: Int
}

"""aggregate sum on columns"""
type user_roles_view_sum_fields {
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "user_roles_view"
"""
input user_roles_view_sum_order_by {
  id: order_by
  userId: order_by
}

"""aggregate var_pop on columns"""
type user_roles_view_var_pop_fields {
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "user_roles_view"
"""
input user_roles_view_var_pop_order_by {
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type user_roles_view_var_samp_fields {
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "user_roles_view"
"""
input user_roles_view_var_samp_order_by {
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type user_roles_view_variance_fields {
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "user_roles_view"
"""
input user_roles_view_variance_order_by {
  id: order_by
  userId: order_by
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  attrs

  """column name"""
  campus

  """column name"""
  createdAt

  """column name"""
  discordId

  """column name"""
  discordLogin

  """column name"""
  email

  """column name"""
  firstName

  """column name"""
  githubId

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  login

  """column name"""
  profile

  """column name"""
  updatedAt
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  attrs: jsonb
  email: String
  firstName: String
  lastName: String
  profile: jsonb
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  githubId: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  githubId: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  githubId: Float
  id: Float
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  attrs: jsonb
  campus: String
  createdAt: timestamptz
  discordId: String
  discordLogin: String
  email: String
  firstName: String
  githubId: Int
  id: Int
  lastName: String
  login: String
  profile: jsonb
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type user_sum_fields {
  githubId: Int
  id: Int
}

input user_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: user_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: user_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: user_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: user_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: user_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input
  where: user_bool_exp!
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  githubId: Float
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  githubId: Float
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields {
  githubId: Float
  id: Float
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "xp_view"
"""
type xp_view {
  amount: numeric

  """An object relationship"""
  event: event
  originEventId: Int
  path: String

  """An object relationship"""
  pathByPath: path

  """An object relationship"""
  user: user
  userId: Int
}

"""
order by aggregate values of table "xp_view"
"""
input xp_view_aggregate_order_by {
  avg: xp_view_avg_order_by
  count: order_by
  max: xp_view_max_order_by
  min: xp_view_min_order_by
  stddev: xp_view_stddev_order_by
  stddev_pop: xp_view_stddev_pop_order_by
  stddev_samp: xp_view_stddev_samp_order_by
  sum: xp_view_sum_order_by
  var_pop: xp_view_var_pop_order_by
  var_samp: xp_view_var_samp_order_by
  variance: xp_view_variance_order_by
}

"""
order by avg() on columns of table "xp_view"
"""
input xp_view_avg_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "xp_view". All fields are combined with a logical 'AND'.
"""
input xp_view_bool_exp {
  _and: [xp_view_bool_exp!]
  _not: xp_view_bool_exp
  _or: [xp_view_bool_exp!]
  amount: numeric_comparison_exp
  event: event_bool_exp
  originEventId: Int_comparison_exp
  path: String_comparison_exp
  pathByPath: path_bool_exp
  user: user_bool_exp
  userId: Int_comparison_exp
}

"""
order by max() on columns of table "xp_view"
"""
input xp_view_max_order_by {
  amount: order_by
  originEventId: order_by
  path: order_by
  userId: order_by
}

"""
order by min() on columns of table "xp_view"
"""
input xp_view_min_order_by {
  amount: order_by
  originEventId: order_by
  path: order_by
  userId: order_by
}

"""Ordering options when selecting data from "xp_view"."""
input xp_view_order_by {
  amount: order_by
  event: event_order_by
  originEventId: order_by
  path: order_by
  pathByPath: path_order_by
  user: user_order_by
  userId: order_by
}

"""
select columns of table "xp_view"
"""
enum xp_view_select_column {
  """column name"""
  amount

  """column name"""
  originEventId

  """column name"""
  path

  """column name"""
  userId
}

"""
order by stddev() on columns of table "xp_view"
"""
input xp_view_stddev_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
order by stddev_pop() on columns of table "xp_view"
"""
input xp_view_stddev_pop_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
order by stddev_samp() on columns of table "xp_view"
"""
input xp_view_stddev_samp_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "xp_view"
"""
input xp_view_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: xp_view_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input xp_view_stream_cursor_value_input {
  amount: numeric
  originEventId: Int
  path: String
  userId: Int
}

"""
order by sum() on columns of table "xp_view"
"""
input xp_view_sum_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
order by var_pop() on columns of table "xp_view"
"""
input xp_view_var_pop_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
order by var_samp() on columns of table "xp_view"
"""
input xp_view_var_samp_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

"""
order by variance() on columns of table "xp_view"
"""
input xp_view_variance_order_by {
  amount: order_by
  originEventId: order_by
  userId: order_by
}

